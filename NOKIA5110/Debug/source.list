
Debug/source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000037c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000494  00010494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00010494  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00010494  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000494  00010494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000494  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000494  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000647  00000000  00000000  000104bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f6  00000000  00000000  00010b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00010f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00010fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001147d  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ba7  00000000  00000000  000224c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059bec  00000000  00000000  0002306c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0007cc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b0  00000000  00000000  0007cca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000470 	.word	0x08000470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000470 	.word	0x08000470

0800014c <main>:
void system_clock_reinit(void);
bool wait_hse(void);


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  SystemInit();
 8000150:	f000 f858 	bl	8000204 <SystemInit>
  setup();
 8000154:	f000 f92f 	bl	80003b6 <setup>
  while (1)
  {
    loop();
 8000158:	f000 f934 	bl	80003c4 <loop>
 800015c:	e7fc      	b.n	8000158 <main+0xc>
	...

08000160 <system_clock_reinit>:
  }
}


void system_clock_reinit(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <system_clock_reinit+0x54>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a12      	ldr	r2, [pc, #72]	; (80001b4 <system_clock_reinit+0x54>)
 800016a:	f043 0301 	orr.w	r3, r3, #1
 800016e:	6013      	str	r3, [r2, #0]
  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (uint32_t)0xF8FF0000; 
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <system_clock_reinit+0x54>)
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	490f      	ldr	r1, [pc, #60]	; (80001b4 <system_clock_reinit+0x54>)
 8000176:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <system_clock_reinit+0x58>)
 8000178:	4013      	ands	r3, r2
 800017a:	604b      	str	r3, [r1, #4]
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <system_clock_reinit+0x54>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <system_clock_reinit+0x54>)
 8000182:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800018a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <system_clock_reinit+0x54>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <system_clock_reinit+0x54>)
 8000192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000196:	6013      	str	r3, [r2, #0]
  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <system_clock_reinit+0x54>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <system_clock_reinit+0x54>)
 800019e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001a2:	6053      	str	r3, [r2, #4]
  /* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x009F0000;
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <system_clock_reinit+0x54>)
 80001a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001aa:	609a      	str	r2, [r3, #8]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021000 	.word	0x40021000
 80001b8:	f8ff0000 	.word	0xf8ff0000

080001bc <wait_hse>:

bool wait_hse(void){
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
	uint32_t status = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
	uint16_t timeout = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	80fb      	strh	r3, [r7, #6]
	do{
		status = (RCC->CR & RCC_CR_HSERDY);
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <wait_hse+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001d2:	603b      	str	r3, [r7, #0]

		timeout++;
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	3301      	adds	r3, #1
 80001d8:	80fb      	strh	r3, [r7, #6]
	}while((status == 0x00) && (timeout != TIMEOUT_HSERDY));
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d103      	bne.n	80001e8 <wait_hse+0x2c>
 80001e0:	88fb      	ldrh	r3, [r7, #6]
 80001e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e6:	d1f0      	bne.n	80001ca <wait_hse+0xe>
	
	if (status == 0x00){
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <wait_hse+0x36>
		return False;
 80001ee:	2300      	movs	r3, #0
 80001f0:	e000      	b.n	80001f4 <wait_hse+0x38>
	}
	return True;
 80001f2:	2301      	movs	r3, #1
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <SystemInit>:
	System clock : 8/1 *8*9 = 72 MHz
	AHB 1 : 72/2
	AHB 2 : 72/1
*/

void SystemInit(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	/* Reset clock config */
	system_clock_reinit();
 8000208:	f7ff ffaa 	bl	8000160 <system_clock_reinit>
	
	/* Reset HSEON bit */
  RCC->CR &= RCC_CR_HSEON;																								// bit HSEON - 16
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <SystemInit+0xa4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <SystemInit+0xa4>)
 8000212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000216:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */	
  RCC->CR &= RCC_CR_HSEBYP;																								// bit HSEBYP - 17
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <SystemInit+0xa4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a22      	ldr	r2, [pc, #136]	; (80002a8 <SystemInit+0xa4>)
 800021e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000222:	6013      	str	r3, [r2, #0]
	/* Set HSEON bit */
	RCC->CR |= RCC_CR_HSEON;																								// bit HSEON - 16
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <SystemInit+0xa4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1f      	ldr	r2, [pc, #124]	; (80002a8 <SystemInit+0xa4>)
 800022a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800022e:	6013      	str	r3, [r2, #0]
	/* Wait still HES readly */
	if (wait_hse()){
 8000230:	f7ff ffc4 	bl	80001bc <wait_hse>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d034      	beq.n	80002a4 <SystemInit+0xa0>
		/* SYSCLK div : AHB prescaler */
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;																			// mask HPRE - 4~7
 800023a:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <SystemInit+0xa4>)
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <SystemInit+0xa4>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	6053      	str	r3, [r2, #4]
		/* PCLK1 : AHB 1 prescaler /1 */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;																			// mask PPRE1 - 8~10
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <SystemInit+0xa4>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <SystemInit+0xa4>)
 8000248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800024c:	6053      	str	r3, [r2, #4]
		/* PCLK2 : AHB 2 prescaler /1 */
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;																			// mask PPRE2 - 11~13
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <SystemInit+0xa4>)
 8000250:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <SystemInit+0xa4>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
		
		/* PLL as source and PLL MULx8 */
		RCC->CFGR |= RCC_CFGR_PLLSRC;																					// bit PLLSRC - 16
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <SystemInit+0xa4>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <SystemInit+0xa4>)
 800025c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000260:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLMULL8;																				// mask PLLMUL - 18~21
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <SystemInit+0xa4>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <SystemInit+0xa4>)
 8000268:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800026c:	6053      	str	r3, [r2, #4]
		/* enable PLL */
		RCC->CR |= RCC_CR_PLLON;																							// bit PLLON - 24
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <SystemInit+0xa4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <SystemInit+0xa4>)
 8000274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000278:	6013      	str	r3, [r2, #0]
		while((RCC->CR & RCC_CR_PLLRDY) == 0){};															// bit PLLRDY - 25
 800027a:	bf00      	nop
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemInit+0xa4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <SystemInit+0x78>
				/*  PLL selected as system clock */
				RCC->CFGR |= ((uint32_t)0x00000002);															// mask SW - 0,1
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <SystemInit+0xa4>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <SystemInit+0xa4>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6053      	str	r3, [r2, #4]
				/* wait still PLL as clock system */
				while((RCC->CFGR & (uint32_t)0x0000000C) != (uint32_t)0x08){};		//mask SWS - 2,3
 8000294:	bf00      	nop
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SystemInit+0xa4>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	f003 030c 	and.w	r3, r3, #12
 800029e:	2b08      	cmp	r3, #8
 80002a0:	d1f9      	bne.n	8000296 <SystemInit+0x92>
	}
	else{
		while(1);
	}
 80002a2:	e000      	b.n	80002a6 <SystemInit+0xa2>
		while(1);
 80002a4:	e7fe      	b.n	80002a4 <SystemInit+0xa0>
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000

080002ac <_ZN12PIControllerC1Ehhs>:

#include "pid.h"

PIController::PIController(uint8_t P,uint8_t I,int16_t limit)
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4603      	mov	r3, r0
 80002bc:	70fb      	strb	r3, [r7, #3]
 80002be:	460b      	mov	r3, r1
 80002c0:	70bb      	strb	r3, [r7, #2]
 80002c2:	4613      	mov	r3, r2
 80002c4:	803b      	strh	r3, [r7, #0]
    :_P(P),_I(I),limit(limit)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	78fa      	ldrb	r2, [r7, #3]
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	78ba      	ldrb	r2, [r7, #2]
 80002d0:	705a      	strb	r2, [r3, #1]
 80002d2:	883a      	ldrh	r2, [r7, #0]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	805a      	strh	r2, [r3, #2]
{
    // nothing
}
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <_ZN12PIControllerclEst>:

int16_t PIController::operator() (int16_t error,uint16_t ts){
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
 80002f0:	4613      	mov	r3, r2
 80002f2:	803b      	strh	r3, [r7, #0]
    int16_t p_val = error*_P;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	887a      	ldrh	r2, [r7, #2]
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	b29b      	uxth	r3, r3
 8000302:	81fb      	strh	r3, [r7, #14]
    int16_t i_val = pre_I + _I*ts*error;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800030a:	b29a      	uxth	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	785b      	ldrb	r3, [r3, #1]
 8000310:	b29b      	uxth	r3, r3
 8000312:	8839      	ldrh	r1, [r7, #0]
 8000314:	fb01 f303 	mul.w	r3, r1, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	8879      	ldrh	r1, [r7, #2]
 800031c:	fb01 f303 	mul.w	r3, r1, r3
 8000320:	b29b      	uxth	r3, r3
 8000322:	4413      	add	r3, r2
 8000324:	b29b      	uxth	r3, r3
 8000326:	81bb      	strh	r3, [r7, #12]
    int16_t output = p_val+i_val;
 8000328:	89fa      	ldrh	r2, [r7, #14]
 800032a:	89bb      	ldrh	r3, [r7, #12]
 800032c:	4413      	add	r3, r2
 800032e:	b29b      	uxth	r3, r3
 8000330:	817b      	strh	r3, [r7, #10]
    output = _contraint(output,-limit,limit);
 8000332:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	885b      	ldrh	r3, [r3, #2]
 800033a:	425b      	negs	r3, r3
 800033c:	429a      	cmp	r2, r3
 800033e:	da05      	bge.n	800034c <_ZN12PIControllerclEst+0x68>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	885b      	ldrh	r3, [r3, #2]
 8000344:	425b      	negs	r3, r3
 8000346:	b29b      	uxth	r3, r3
 8000348:	b21b      	sxth	r3, r3
 800034a:	e007      	b.n	800035c <_ZN12PIControllerclEst+0x78>
 800034c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	8852      	ldrh	r2, [r2, #2]
 8000354:	4293      	cmp	r3, r2
 8000356:	bfa8      	it	ge
 8000358:	4613      	movge	r3, r2
 800035a:	b21b      	sxth	r3, r3
 800035c:	817b      	strh	r3, [r7, #10]
    return output;
 800035e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000392:	f7ff ff37 	bl	8000204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f000 f847 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff fed7 	bl	800014c <main>
  bx lr
 800039e:	4770      	bx	lr
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000494 	.word	0x08000494
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	20000024 	.word	0x20000024

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>

080003b6 <setup>:
#include "serial.h"
#include <stdio.h>

PIController PI_Speed{1,1,24000};

void setup(){
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <loop>:

void loop(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    uint16_t val = PI_Speed(10,2);
 80003ca:	2202      	movs	r2, #2
 80003cc:	210a      	movs	r1, #10
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <loop+0x1c>)
 80003d0:	f7ff ff88 	bl	80002e4 <_ZN12PIControllerclEst>
 80003d4:	4603      	mov	r3, r0
 80003d6:	80fb      	strh	r3, [r7, #6]
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <_Z41__static_initialization_and_destruction_0ii>:
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d10b      	bne.n	800040c <_Z41__static_initialization_and_destruction_0ii+0x28>
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <_Z41__static_initialization_and_destruction_0ii+0x28>
PIController PI_Speed{1,1,24000};
 80003fe:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	4803      	ldr	r0, [pc, #12]	; (8000414 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000408:	f7ff ff50 	bl	80002ac <_ZN12PIControllerC1Ehhs>
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000001c 	.word	0x2000001c

08000418 <_GLOBAL__sub_I_PI_Speed>:
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
 800041c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000420:	2001      	movs	r0, #1
 8000422:	f7ff ffdf 	bl	80003e4 <_Z41__static_initialization_and_destruction_0ii>
 8000426:	bd80      	pop	{r7, pc}

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	2600      	movs	r6, #0
 800042c:	4d0c      	ldr	r5, [pc, #48]	; (8000460 <__libc_init_array+0x38>)
 800042e:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	f000 f81a 	bl	8000470 <_init>
 800043c:	2600      	movs	r6, #0
 800043e:	4d0a      	ldr	r5, [pc, #40]	; (8000468 <__libc_init_array+0x40>)
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <__libc_init_array+0x44>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	08000490 	.word	0x08000490

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
