
Debug/source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000378  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000378  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000252  00000000  00000000  000103a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000015f  00000000  00000000  000105f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  000107e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a61  00000000  00000000  00010840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004a8  00000000  00000000  000212a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054998  00000000  00000000  00021749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000760e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  0007612c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000358 	.word	0x08000358

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000358 	.word	0x08000358

0800014c <main>:
void system_clock_reinit(void);
bool wait_hse(void);


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  SystemInit();
 8000150:	f000 f858 	bl	8000204 <SystemInit>
  setup();
 8000154:	f000 f8cf 	bl	80002f6 <setup>
  while (1)
  {
    loop();
 8000158:	f000 f8d3 	bl	8000302 <loop>
 800015c:	e7fc      	b.n	8000158 <main+0xc>
	...

08000160 <system_clock_reinit>:
  }
}


void system_clock_reinit(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <system_clock_reinit+0x54>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a12      	ldr	r2, [pc, #72]	; (80001b4 <system_clock_reinit+0x54>)
 800016a:	f043 0301 	orr.w	r3, r3, #1
 800016e:	6013      	str	r3, [r2, #0]
  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (uint32_t)0xF8FF0000; 
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <system_clock_reinit+0x54>)
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	490f      	ldr	r1, [pc, #60]	; (80001b4 <system_clock_reinit+0x54>)
 8000176:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <system_clock_reinit+0x58>)
 8000178:	4013      	ands	r3, r2
 800017a:	604b      	str	r3, [r1, #4]
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <system_clock_reinit+0x54>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <system_clock_reinit+0x54>)
 8000182:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800018a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <system_clock_reinit+0x54>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <system_clock_reinit+0x54>)
 8000192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000196:	6013      	str	r3, [r2, #0]
  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <system_clock_reinit+0x54>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <system_clock_reinit+0x54>)
 800019e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001a2:	6053      	str	r3, [r2, #4]
  /* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x009F0000;
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <system_clock_reinit+0x54>)
 80001a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001aa:	609a      	str	r2, [r3, #8]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021000 	.word	0x40021000
 80001b8:	f8ff0000 	.word	0xf8ff0000

080001bc <wait_hse>:

bool wait_hse(void){
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
	uint32_t status = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
	uint16_t timeout = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	80fb      	strh	r3, [r7, #6]
	do{
		status = (RCC->CR & RCC_CR_HSERDY);
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <wait_hse+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001d2:	603b      	str	r3, [r7, #0]

		timeout++;
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	3301      	adds	r3, #1
 80001d8:	80fb      	strh	r3, [r7, #6]
	}while((status == 0x00) && (timeout != TIMEOUT_HSERDY));
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d103      	bne.n	80001e8 <wait_hse+0x2c>
 80001e0:	88fb      	ldrh	r3, [r7, #6]
 80001e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e6:	d1f0      	bne.n	80001ca <wait_hse+0xe>
	
	if (status == 0x00){
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <wait_hse+0x36>
		return False;
 80001ee:	2300      	movs	r3, #0
 80001f0:	e000      	b.n	80001f4 <wait_hse+0x38>
	}
	return True;
 80001f2:	2301      	movs	r3, #1
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <SystemInit>:
	System clock : 8/1 *8*9 = 72 MHz
	AHB 1 : 72/2
	AHB 2 : 72/1
*/

void SystemInit(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	/* Reset clock config */
	system_clock_reinit();
 8000208:	f7ff ffaa 	bl	8000160 <system_clock_reinit>
	
	/* Reset HSEON bit */
  RCC->CR &= RCC_CR_HSEON;																								// bit HSEON - 16
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <SystemInit+0xa4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <SystemInit+0xa4>)
 8000212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000216:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */	
  RCC->CR &= RCC_CR_HSEBYP;																								// bit HSEBYP - 17
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <SystemInit+0xa4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a22      	ldr	r2, [pc, #136]	; (80002a8 <SystemInit+0xa4>)
 800021e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000222:	6013      	str	r3, [r2, #0]
	/* Set HSEON bit */
	RCC->CR |= RCC_CR_HSEON;																								// bit HSEON - 16
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <SystemInit+0xa4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1f      	ldr	r2, [pc, #124]	; (80002a8 <SystemInit+0xa4>)
 800022a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800022e:	6013      	str	r3, [r2, #0]
	/* Wait still HES readly */
	if (wait_hse()){
 8000230:	f7ff ffc4 	bl	80001bc <wait_hse>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d034      	beq.n	80002a4 <SystemInit+0xa0>
		/* SYSCLK div : AHB prescaler */
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;																			// mask HPRE - 4~7
 800023a:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <SystemInit+0xa4>)
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <SystemInit+0xa4>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	6053      	str	r3, [r2, #4]
		/* PCLK1 : AHB 1 prescaler /1 */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;																			// mask PPRE1 - 8~10
 8000242:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <SystemInit+0xa4>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <SystemInit+0xa4>)
 8000248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800024c:	6053      	str	r3, [r2, #4]
		/* PCLK2 : AHB 2 prescaler /1 */
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;																			// mask PPRE2 - 11~13
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <SystemInit+0xa4>)
 8000250:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <SystemInit+0xa4>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]
		
		/* PLL as source and PLL MULx8 */
		RCC->CFGR |= RCC_CFGR_PLLSRC;																					// bit PLLSRC - 16
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <SystemInit+0xa4>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <SystemInit+0xa4>)
 800025c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000260:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLMULL8;																				// mask PLLMUL - 18~21
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <SystemInit+0xa4>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <SystemInit+0xa4>)
 8000268:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800026c:	6053      	str	r3, [r2, #4]
		/* enable PLL */
		RCC->CR |= RCC_CR_PLLON;																							// bit PLLON - 24
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <SystemInit+0xa4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <SystemInit+0xa4>)
 8000274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000278:	6013      	str	r3, [r2, #0]
		while((RCC->CR & RCC_CR_PLLRDY) == 0){};															// bit PLLRDY - 25
 800027a:	bf00      	nop
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemInit+0xa4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <SystemInit+0x78>
				/*  PLL selected as system clock */
				RCC->CFGR |= ((uint32_t)0x00000002);															// mask SW - 0,1
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <SystemInit+0xa4>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <SystemInit+0xa4>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6053      	str	r3, [r2, #4]
				/* wait still PLL as clock system */
				while((RCC->CFGR & (uint32_t)0x0000000C) != (uint32_t)0x08){};		//mask SWS - 2,3
 8000294:	bf00      	nop
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SystemInit+0xa4>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	f003 030c 	and.w	r3, r3, #12
 800029e:	2b08      	cmp	r3, #8
 80002a0:	d1f9      	bne.n	8000296 <SystemInit+0x92>
	}
	else{
		while(1);
	}
 80002a2:	e000      	b.n	80002a6 <SystemInit+0xa2>
		while(1);
 80002a4:	e7fe      	b.n	80002a4 <SystemInit+0xa0>
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000

080002ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002d2:	f7ff ff97 	bl	8000204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f81b 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff37 	bl	800014c <main>
  bx lr
 80002de:	4770      	bx	lr
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>

080002f6 <setup>:
#include "use.h"

void setup(){
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <loop>:

void loop(){
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
    
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	2600      	movs	r6, #0
 8000314:	4d0c      	ldr	r5, [pc, #48]	; (8000348 <__libc_init_array+0x38>)
 8000316:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	42a6      	cmp	r6, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	f000 f81a 	bl	8000358 <_init>
 8000324:	2600      	movs	r6, #0
 8000326:	4d0a      	ldr	r5, [pc, #40]	; (8000350 <__libc_init_array+0x40>)
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <__libc_init_array+0x44>)
 800032a:	1b64      	subs	r4, r4, r5
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	42a6      	cmp	r6, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f855 3b04 	ldr.w	r3, [r5], #4
 8000338:	4798      	blx	r3
 800033a:	3601      	adds	r6, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	4798      	blx	r3
 8000344:	3601      	adds	r6, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
