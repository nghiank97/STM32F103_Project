
ModbusRTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800544c  0800544c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800544c  0800544c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800544c  0800544c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08005454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200000f4  08005548  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005548  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dd8  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393e  00000000  00000000  00036ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0003a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  0003b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0b2  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163b4  00000000  00000000  00059652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfc2  00000000  00000000  0006fa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd9c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d0  00000000  00000000  000fda1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f4 	.word	0x200000f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fdc 	.word	0x08004fdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f8 	.word	0x200000f8
 8000148:	08004fdc 	.word	0x08004fdc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb9a 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c4 	bl	80002e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f896 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000164:	f003 fd9a 	bl	8003c9c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000168:	f003 fdce 	bl	8003d08 <loop>
 800016c:	e7fc      	b.n	8000168 <main+0x1c>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b090      	sub	sp, #64	; 0x40
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0318 	add.w	r3, r7, #24
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f003 ff91 	bl	80040a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000190:	2301      	movs	r3, #1
 8000192:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000198:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019a:	2300      	movs	r3, #0
 800019c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 feac 	bl	8000f14 <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c2:	f000 f8c3 	bl	800034c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ca:	2302      	movs	r3, #2
 80001cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2102      	movs	r1, #2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 f917 	bl	8001414 <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ec:	f000 f8ae 	bl	800034c <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	3740      	adds	r7, #64	; 0x40
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000214:	4b1d      	ldr	r3, [pc, #116]	; (800028c <MX_TIM2_Init+0x94>)
 8000216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800021c:	4b1b      	ldr	r3, [pc, #108]	; (800028c <MX_TIM2_Init+0x94>)
 800021e:	2247      	movs	r2, #71	; 0x47
 8000220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <MX_TIM2_Init+0x94>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_TIM2_Init+0x94>)
 800022a:	2231      	movs	r2, #49	; 0x31
 800022c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_TIM2_Init+0x94>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_TIM2_Init+0x94>)
 8000236:	2200      	movs	r2, #0
 8000238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800023a:	4814      	ldr	r0, [pc, #80]	; (800028c <MX_TIM2_Init+0x94>)
 800023c:	f001 fab4 	bl	80017a8 <HAL_TIM_Base_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000246:	f000 f881 	bl	800034c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000250:	f107 0308 	add.w	r3, r7, #8
 8000254:	4619      	mov	r1, r3
 8000256:	480d      	ldr	r0, [pc, #52]	; (800028c <MX_TIM2_Init+0x94>)
 8000258:	f001 fc7e 	bl	8001b58 <HAL_TIM_ConfigClockSource>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000262:	f000 f873 	bl	800034c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800026e:	463b      	mov	r3, r7
 8000270:	4619      	mov	r1, r3
 8000272:	4806      	ldr	r0, [pc, #24]	; (800028c <MX_TIM2_Init+0x94>)
 8000274:	f001 fe50 	bl	8001f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800027e:	f000 f865 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000282:	bf00      	nop
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000208 	.word	0x20000208

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f001 fe96 	bl	8001ff8 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f83b 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200001c4 	.word	0x200001c4
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_GPIO_Init+0x40>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <MX_GPIO_Init+0x40>)
 80002f0:	f043 0320 	orr.w	r3, r3, #32
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_GPIO_Init+0x40>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0320 	and.w	r3, r3, #32
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_GPIO_Init+0x40>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <MX_GPIO_Init+0x40>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]

}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d101      	bne.n	800033e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800033a:	f000 fabb 	bl	80008b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40000800 	.word	0x40000800

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>
	...

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <HAL_MspInit+0x5c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x5c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_MspInit+0x60>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_MspInit+0x60>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003cc:	d113      	bne.n	80003f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_TIM_Base_MspInit+0x44>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <HAL_TIM_Base_MspInit+0x44>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <HAL_TIM_Base_MspInit+0x44>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	201c      	movs	r0, #28
 80003ec:	f000 fb33 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80003f0:	201c      	movs	r0, #28
 80003f2:	f000 fb4c 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a20      	ldr	r2, [pc, #128]	; (80004a0 <HAL_UART_MspInit+0x9c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d139      	bne.n	8000498 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 800042a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <HAL_UART_MspInit+0xa0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045a:	2302      	movs	r3, #2
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <HAL_UART_MspInit+0xa4>)
 800046a:	f000 fbcf 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4809      	ldr	r0, [pc, #36]	; (80004a8 <HAL_UART_MspInit+0xa4>)
 8000484:	f000 fbc2 	bl	8000c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	2025      	movs	r0, #37	; 0x25
 800048e:	f000 fae2 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000492:	2025      	movs	r0, #37	; 0x25
 8000494:	f000 fafb 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40013800 	.word	0x40013800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800

080004ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	; 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80004bc:	2200      	movs	r2, #0
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	201e      	movs	r0, #30
 80004c2:	f000 fac8 	bl	8000a56 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004c6:	201e      	movs	r0, #30
 80004c8:	f000 fae1 	bl	8000a8e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <HAL_InitTick+0xa0>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <HAL_InitTick+0xa0>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	61d3      	str	r3, [r2, #28]
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_InitTick+0xa0>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e4:	f107 0210 	add.w	r2, r7, #16
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4611      	mov	r1, r2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 f90c 	bl	800170c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80004f4:	f001 f8e2 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 80004f8:	4603      	mov	r3, r0
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_InitTick+0xa4>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3b01      	subs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_InitTick+0xa8>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <HAL_InitTick+0xac>)
 8000510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <HAL_InitTick+0xa8>)
 8000514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000518:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_InitTick+0xa8>)
 800051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_InitTick+0xa8>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_InitTick+0xa8>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_InitTick+0xa8>)
 800052e:	f001 f93b 	bl	80017a8 <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <HAL_InitTick+0xa8>)
 800053a:	f001 f985 	bl	8001848 <HAL_TIM_Base_Start_IT>
 800053e:	4603      	mov	r3, r0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3730      	adds	r7, #48	; 0x30
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	431bde83 	.word	0x431bde83
 8000554:	20000250 	.word	0x20000250
 8000558:	40000800 	.word	0x40000800

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) !=RESET) {
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <TIM2_IRQHandler+0x50>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d118      	bne.n	80005f0 <TIM2_IRQHandler+0x44>
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <TIM2_IRQHandler+0x50>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d111      	bne.n	80005f0 <TIM2_IRQHandler+0x44>
	  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <TIM2_IRQHandler+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f06f 0201 	mvn.w	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
	  if (!--downcounter)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <TIM2_IRQHandler+0x54>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	3b01      	subs	r3, #1
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <TIM2_IRQHandler+0x54>)
 80005e0:	801a      	strh	r2, [r3, #0]
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <TIM2_IRQHandler+0x54>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <TIM2_IRQHandler+0x44>
		  pxMBPortCBTimerExpired();
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <TIM2_IRQHandler+0x58>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4798      	blx	r3
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM2_IRQHandler+0x50>)
 80005f2:	f001 f9a9 	bl	8001948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000208 	.word	0x20000208
 8000600:	20000168 	.word	0x20000168
 8000604:	200002a0 	.word	0x200002a0

08000608 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <TIM4_IRQHandler+0x84>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b20      	cmp	r3, #32
 800061a:	bf0c      	ite	eq
 800061c:	2301      	moveq	r3, #1
 800061e:	2300      	movne	r3, #0
 8000620:	b2db      	uxtb	r3, r3
 8000622:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <TIM4_IRQHandler+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	60bb      	str	r3, [r7, #8]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d011      	beq.n	800065a <TIM4_IRQHandler+0x52>
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <TIM4_IRQHandler+0x52>
    pxMBFrameCBByteReceived();
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <TIM4_IRQHandler+0x88>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart1);
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <TIM4_IRQHandler+0x84>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <TIM4_IRQHandler+0x84>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
    return;
 8000658:	e014      	b.n	8000684 <TIM4_IRQHandler+0x7c>
  }

  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <TIM4_IRQHandler+0x84>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000664:	2b80      	cmp	r3, #128	; 0x80
 8000666:	d10a      	bne.n	800067e <TIM4_IRQHandler+0x76>
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <TIM4_IRQHandler+0x84>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <TIM4_IRQHandler+0x76>
    pxMBFrameCBTransmitterEmpty();
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <TIM4_IRQHandler+0x8c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4798      	blx	r3
    return ;
 800067c:	e002      	b.n	8000684 <TIM4_IRQHandler+0x7c>
  }
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <TIM4_IRQHandler+0x90>)
 8000680:	f001 f962 	bl	8001948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001c4 	.word	0x200001c4
 8000690:	200002a4 	.word	0x200002a4
 8000694:	2000029c 	.word	0x2000029c
 8000698:	20000250 	.word	0x20000250

0800069c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <USART1_IRQHandler+0x10>)
 80006a2:	f001 fd89 	bl	80021b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//
  /* USER CODE END USART1_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001c4 	.word	0x200001c4

080006b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_kill>:

int _kill(int pid, int sig)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80006c8:	f003 fca2 	bl	8004010 <__errno>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2216      	movs	r2, #22
 80006d0:	601a      	str	r2, [r3, #0]
	return -1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_exit>:

void _exit (int status)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80006e6:	f04f 31ff 	mov.w	r1, #4294967295
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ffe7 	bl	80006be <_kill>
	while (1) {}		/* Make sure we hang here */
 80006f0:	e7fe      	b.n	80006f0 <_exit+0x12>

080006f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	e00a      	b.n	800071a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000704:	f3af 8000 	nop.w
 8000708:	4601      	mov	r1, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	60ba      	str	r2, [r7, #8]
 8000710:	b2ca      	uxtb	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf0      	blt.n	8000704 <_read+0x12>
	}

return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	e009      	b.n	8000752 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	60ba      	str	r2, [r7, #8]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	dbf1      	blt.n	800073e <_write+0x12>
	}
	return len;
 800075a:	687b      	ldr	r3, [r7, #4]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_close>:

int _close(int file)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	return -1;
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078a:	605a      	str	r2, [r3, #4]
	return 0;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <_isatty>:

int _isatty(int file)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f003 fc0c 	bl	8004010 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	20000110 	.word	0x20000110
 800082c:	200003c0 	.word	0x200003c0

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000862:	f7ff ffe5 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f003 fbeb 	bl	8004040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fc6f 	bl	800014c <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000878:	08005454 	.word	0x08005454
  ldr r2, =_sbss
 800087c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000880:	200003c0 	.word	0x200003c0

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f8d1 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f7ff fe04 	bl	80004ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fd58 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000298 	.word	0x20000298

080008d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000298 	.word	0x20000298

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <__NVIC_EnableIRQ+0x34>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff4f 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff64 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ffb2 	bl	80009dc <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff81 	bl	8000988 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff57 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d008      	beq.n	8000ad2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e020      	b.n	8000b14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 020e 	bic.w	r2, r2, #14
 8000ae0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afa:	2101      	movs	r1, #1
 8000afc:	fa01 f202 	lsl.w	r2, r1, r2
 8000b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d005      	beq.n	8000b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e051      	b.n	8000be6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 020e 	bic.w	r2, r2, #14
 8000b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_DMA_Abort_IT+0xd0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d029      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0xa0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_DMA_Abort_IT+0xd4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d022      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x9c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_DMA_Abort_IT+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d01a      	beq.n	8000bb6 <HAL_DMA_Abort_IT+0x96>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_DMA_Abort_IT+0xdc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d012      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0x90>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <HAL_DMA_Abort_IT+0xe0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d00a      	beq.n	8000baa <HAL_DMA_Abort_IT+0x8a>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <HAL_DMA_Abort_IT+0xe4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d102      	bne.n	8000ba4 <HAL_DMA_Abort_IT+0x84>
 8000b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ba2:	e00e      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba8:	e00b      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bae:	e008      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	e005      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	e002      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	e000      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xa2>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <HAL_DMA_Abort_IT+0xe8>)
 8000bc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	4798      	blx	r3
    } 
  }
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020008 	.word	0x40020008
 8000bf4:	4002001c 	.word	0x4002001c
 8000bf8:	40020030 	.word	0x40020030
 8000bfc:	40020044 	.word	0x40020044
 8000c00:	40020058 	.word	0x40020058
 8000c04:	4002006c 	.word	0x4002006c
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	e169      	b.n	8000ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c20:	2201      	movs	r2, #1
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 8158 	bne.w	8000eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a9a      	ldr	r2, [pc, #616]	; (8000eac <HAL_GPIO_Init+0x2a0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d05e      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c48:	4a98      	ldr	r2, [pc, #608]	; (8000eac <HAL_GPIO_Init+0x2a0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d875      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c4e:	4a98      	ldr	r2, [pc, #608]	; (8000eb0 <HAL_GPIO_Init+0x2a4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d058      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c54:	4a96      	ldr	r2, [pc, #600]	; (8000eb0 <HAL_GPIO_Init+0x2a4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d86f      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c5a:	4a96      	ldr	r2, [pc, #600]	; (8000eb4 <HAL_GPIO_Init+0x2a8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d052      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c60:	4a94      	ldr	r2, [pc, #592]	; (8000eb4 <HAL_GPIO_Init+0x2a8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d869      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c66:	4a94      	ldr	r2, [pc, #592]	; (8000eb8 <HAL_GPIO_Init+0x2ac>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d04c      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c6c:	4a92      	ldr	r2, [pc, #584]	; (8000eb8 <HAL_GPIO_Init+0x2ac>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d863      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c72:	4a92      	ldr	r2, [pc, #584]	; (8000ebc <HAL_GPIO_Init+0x2b0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d046      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c78:	4a90      	ldr	r2, [pc, #576]	; (8000ebc <HAL_GPIO_Init+0x2b0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d85d      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d82a      	bhi.n	8000cd8 <HAL_GPIO_Init+0xcc>
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d859      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <HAL_GPIO_Init+0x80>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000d07 	.word	0x08000d07
 8000c90:	08000ce1 	.word	0x08000ce1
 8000c94:	08000cf3 	.word	0x08000cf3
 8000c98:	08000d35 	.word	0x08000d35
 8000c9c:	08000d3b 	.word	0x08000d3b
 8000ca0:	08000d3b 	.word	0x08000d3b
 8000ca4:	08000d3b 	.word	0x08000d3b
 8000ca8:	08000d3b 	.word	0x08000d3b
 8000cac:	08000d3b 	.word	0x08000d3b
 8000cb0:	08000d3b 	.word	0x08000d3b
 8000cb4:	08000d3b 	.word	0x08000d3b
 8000cb8:	08000d3b 	.word	0x08000d3b
 8000cbc:	08000d3b 	.word	0x08000d3b
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d3b 	.word	0x08000d3b
 8000cc8:	08000d3b 	.word	0x08000d3b
 8000ccc:	08000d3b 	.word	0x08000d3b
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000cfd 	.word	0x08000cfd
 8000cd8:	4a79      	ldr	r2, [pc, #484]	; (8000ec0 <HAL_GPIO_Init+0x2b4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cde:	e02c      	b.n	8000d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e029      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	3304      	adds	r3, #4
 8000cee:	623b      	str	r3, [r7, #32]
          break;
 8000cf0:	e024      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e01f      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	330c      	adds	r3, #12
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e01a      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e013      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	611a      	str	r2, [r3, #16]
          break;
 8000d26:	e009      	b.n	8000d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	615a      	str	r2, [r3, #20]
          break;
 8000d32:	e003      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          break;
 8000d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d801      	bhi.n	8000d46 <HAL_GPIO_Init+0x13a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	e001      	b.n	8000d4a <HAL_GPIO_Init+0x13e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2bff      	cmp	r3, #255	; 0xff
 8000d50:	d802      	bhi.n	8000d58 <HAL_GPIO_Init+0x14c>
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x152>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3b08      	subs	r3, #8
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	210f      	movs	r1, #15
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	6a39      	ldr	r1, [r7, #32]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 80b1 	beq.w	8000eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2bc>)
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_GPIO_Init+0x2c0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1e8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_GPIO_Init+0x2c8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a3d      	ldr	r2, [pc, #244]	; (8000ed8 <HAL_GPIO_Init+0x2cc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1e0>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000dec:	2304      	movs	r3, #4
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0a:	492f      	ldr	r1, [pc, #188]	; (8000ec8 <HAL_GPIO_Init+0x2bc>)
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	492c      	ldr	r1, [pc, #176]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4928      	ldr	r1, [pc, #160]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4922      	ldr	r1, [pc, #136]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	491e      	ldr	r1, [pc, #120]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	4918      	ldr	r1, [pc, #96]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4914      	ldr	r1, [pc, #80]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d021      	beq.n	8000ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	490e      	ldr	r1, [pc, #56]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60cb      	str	r3, [r1, #12]
 8000ea8:	e021      	b.n	8000eee <HAL_GPIO_Init+0x2e2>
 8000eaa:	bf00      	nop
 8000eac:	10320000 	.word	0x10320000
 8000eb0:	10310000 	.word	0x10310000
 8000eb4:	10220000 	.word	0x10220000
 8000eb8:	10210000 	.word	0x10210000
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	10110000 	.word	0x10110000
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40011400 	.word	0x40011400
 8000edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4909      	ldr	r1, [pc, #36]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	fa22 f303 	lsr.w	r3, r2, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f47f ae8e 	bne.w	8000c20 <HAL_GPIO_Init+0x14>
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	372c      	adds	r7, #44	; 0x2c
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e26c      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d112      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d10b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	4b89      	ldr	r3, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d06c      	beq.n	8001040 <HAL_RCC_OscConfig+0x12c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d168      	bne.n	8001040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e246      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a7f      	ldr	r2, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7a      	ldr	r2, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a77      	ldr	r2, [pc, #476]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xbc>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a71      	ldr	r2, [pc, #452]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a67      	ldr	r2, [pc, #412]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc72 	bl	80008d8 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc6e 	bl	80008d8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1fa      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe4>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc5e 	bl	80008d8 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fc5a 	bl	80008d8 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1e6      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x10c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
 8001066:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1ba      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc13 	bl	80008d8 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc0f 	bl	80008d8 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e19b      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fbf2 	bl	80008d8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fbee 	bl	80008d8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e17a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03a      	beq.n	8001198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fbd2 	bl	80008d8 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fbce 	bl	80008d8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e15a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 fb08 	bl	800176c <RCC_Delay>
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fbb8 	bl	80008d8 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e00f      	b.n	800118c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fbb4 	bl	80008d8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d908      	bls.n	800118c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e140      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	42420000 	.word	0x42420000
 8001188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e9      	bne.n	800116c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a6 	beq.w	80012f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a93      	ldr	r2, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b8e      	ldr	r3, [pc, #568]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fb75 	bl	80008d8 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fb71 	bl	80008d8 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0fd      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x312>
 8001218:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x334>
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x356>
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a6c      	ldr	r2, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a69      	ldr	r2, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a66      	ldr	r2, [pc, #408]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb25 	bl	80008d8 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb21 	bl	80008d8 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0ab      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x37e>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb0f 	bl	80008d8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb0b 	bl	80008d8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e095      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8081 	beq.w	80013fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d061      	beq.n	80013cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d146      	bne.n	800139e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fadf 	bl	80008d8 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fadb 	bl	80008d8 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e067      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	492d      	ldr	r1, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	430b      	orrs	r3, r1
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff faaf 	bl	80008d8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff faab 	bl	80008d8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e037      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x46a>
 800139c:	e02f      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fa98 	bl	80008d8 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fa94 	bl	80008d8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e020      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x498>
 80013ca:	e018      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420060 	.word	0x42420060

08001414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0d0      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d910      	bls.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	4965      	ldr	r1, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d040      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d115      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e073      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06b      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff f9e8 	bl	80008d8 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f9e4 	bl	80008d8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e053      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d210      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4922      	ldr	r1, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1cc>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff72 	bl	80004ac <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08005100 	.word	0x08005100
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	b490      	push	{r4, r7}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f0:	1d3c      	adds	r4, r7, #4
 80015f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f8:	f240 2301 	movw	r3, #513	; 0x201
 80015fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x46>
 8001626:	e02d      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162a:	623b      	str	r3, [r7, #32]
      break;
 800162c:	e02d      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0c5b      	lsrs	r3, r3, #17
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165a:	4413      	add	r3, r2
 800165c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001666:	fb02 f203 	mul.w	r2, r2, r3
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e004      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	623b      	str	r3, [r7, #32]
      break;
 8001682:	e002      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001686:	623b      	str	r3, [r7, #32]
      break;
 8001688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168a:	6a3b      	ldr	r3, [r7, #32]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bc90      	pop	{r4, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	08004ff4 	.word	0x08004ff4
 800169c:	40021000 	.word	0x40021000
 80016a0:	007a1200 	.word	0x007a1200
 80016a4:	003d0900 	.word	0x003d0900

080016a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c0:	f7ff fff2 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	4903      	ldr	r1, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08005110 	.word	0x08005110

080016e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e8:	f7ff ffde 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0adb      	lsrs	r3, r3, #11
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	08005110 	.word	0x08005110

0800170c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	220f      	movs	r2, #15
 800171a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_GetClockConfig+0x58>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_GetClockConfig+0x58>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_GetClockConfig+0x58>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_GetClockConfig+0x58>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_GetClockConfig+0x5c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0207 	and.w	r2, r3, #7
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40022000 	.word	0x40022000

0800176c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <RCC_Delay+0x34>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <RCC_Delay+0x38>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0a5b      	lsrs	r3, r3, #9
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001788:	bf00      	nop
  }
  while (Delay --);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e5a      	subs	r2, r3, #1
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f9      	bne.n	8001788 <RCC_Delay+0x1c>
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000000 	.word	0x20000000
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e041      	b.n	800183e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7fe fdf4 	bl	80003bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3304      	adds	r3, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f000 fa9e 	bl	8001d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e03a      	b.n	80018d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_TIM_Base_Start_IT+0x98>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00e      	beq.n	80018a0 <HAL_TIM_Base_Start_IT+0x58>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188a:	d009      	beq.n	80018a0 <HAL_TIM_Base_Start_IT+0x58>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d004      	beq.n	80018a0 <HAL_TIM_Base_Start_IT+0x58>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d010      	beq.n	80018d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c2:	e007      	b.n	80018d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40000800 	.word	0x40000800

080018ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	f241 1311 	movw	r3, #4369	; 0x1111
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10f      	bne.n	8001934 <HAL_TIM_Base_Stop_IT+0x48>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	f240 4344 	movw	r3, #1092	; 0x444
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_TIM_Base_Stop_IT+0x48>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d122      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d11b      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0202 	mvn.w	r2, #2
 8001974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9b1 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001990:	e005      	b.n	800199e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f9a4 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f9b3 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d122      	bne.n	80019f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d11b      	bne.n	80019f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0204 	mvn.w	r2, #4
 80019c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2202      	movs	r2, #2
 80019ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f987 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 80019e4:	e005      	b.n	80019f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f97a 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f989 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d122      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d11b      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0208 	mvn.w	r2, #8
 8001a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2204      	movs	r2, #4
 8001a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f95d 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e005      	b.n	8001a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f950 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f95f 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d122      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d11b      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0210 	mvn.w	r2, #16
 8001a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2208      	movs	r2, #8
 8001a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f933 	bl	8001cf2 <HAL_TIM_IC_CaptureCallback>
 8001a8c:	e005      	b.n	8001a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f926 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f935 	bl	8001d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10e      	bne.n	8001acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 0201 	mvn.w	r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fc2e 	bl	8000328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b80      	cmp	r3, #128	; 0x80
 8001ad8:	d10e      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae4:	2b80      	cmp	r3, #128	; 0x80
 8001ae6:	d107      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa77 	bl	8001fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b40      	cmp	r3, #64	; 0x40
 8001b04:	d10e      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b10:	2b40      	cmp	r3, #64	; 0x40
 8001b12:	d107      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8f9 	bl	8001d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d107      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0220 	mvn.w	r2, #32
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa42 	bl	8001fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_TIM_ConfigClockSource+0x18>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0b3      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x180>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba8:	d03e      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0xd0>
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bae:	f200 8087 	bhi.w	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb6:	f000 8085 	beq.w	8001cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbe:	d87f      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bc0:	2b70      	cmp	r3, #112	; 0x70
 8001bc2:	d01a      	beq.n	8001bfa <HAL_TIM_ConfigClockSource+0xa2>
 8001bc4:	2b70      	cmp	r3, #112	; 0x70
 8001bc6:	d87b      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bc8:	2b60      	cmp	r3, #96	; 0x60
 8001bca:	d050      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x116>
 8001bcc:	2b60      	cmp	r3, #96	; 0x60
 8001bce:	d877      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bd0:	2b50      	cmp	r3, #80	; 0x50
 8001bd2:	d03c      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0xf6>
 8001bd4:	2b50      	cmp	r3, #80	; 0x50
 8001bd6:	d873      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d058      	beq.n	8001c8e <HAL_TIM_ConfigClockSource+0x136>
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d86f      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001be0:	2b30      	cmp	r3, #48	; 0x30
 8001be2:	d064      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x156>
 8001be4:	2b30      	cmp	r3, #48	; 0x30
 8001be6:	d86b      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d060      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x156>
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d867      	bhi.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d05c      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x156>
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d05a      	beq.n	8001cae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bf8:	e062      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6899      	ldr	r1, [r3, #8]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f000 f966 	bl	8001eda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	609a      	str	r2, [r3, #8]
      break;
 8001c26:	e04e      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6899      	ldr	r1, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f000 f94f 	bl	8001eda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c4a:	609a      	str	r2, [r3, #8]
      break;
 8001c4c:	e03b      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f000 f8c6 	bl	8001dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2150      	movs	r1, #80	; 0x50
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f91d 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001c6c:	e02b      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f000 f8e4 	bl	8001e48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2160      	movs	r1, #96	; 0x60
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f90d 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001c8c:	e01b      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f000 f8a6 	bl	8001dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2140      	movs	r1, #64	; 0x40
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f8fd 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001cac:	e00b      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4610      	mov	r0, r2
 8001cba:	f000 f8f4 	bl	8001ea6 <TIM_ITRx_SetConfig>
        break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cc0:	bf00      	nop
 8001cc2:	e000      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <TIM_Base_SetConfig+0xb8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00b      	beq.n	8001d58 <TIM_Base_SetConfig+0x30>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d46:	d007      	beq.n	8001d58 <TIM_Base_SetConfig+0x30>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <TIM_Base_SetConfig+0xbc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0x30>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <TIM_Base_SetConfig+0xc0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <TIM_Base_SetConfig+0xb8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00b      	beq.n	8001d8a <TIM_Base_SetConfig+0x62>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d007      	beq.n	8001d8a <TIM_Base_SetConfig+0x62>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <TIM_Base_SetConfig+0xbc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d003      	beq.n	8001d8a <TIM_Base_SetConfig+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <TIM_Base_SetConfig+0xc0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d108      	bne.n	8001d9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <TIM_Base_SetConfig+0xb8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d103      	bne.n	8001dd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	615a      	str	r2, [r3, #20]
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800

08001dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	f023 0201 	bic.w	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f023 030a 	bic.w	r3, r3, #10
 8001e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	621a      	str	r2, [r3, #32]
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f023 0210 	bic.w	r2, r3, #16
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	031b      	lsls	r3, r3, #12
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	621a      	str	r2, [r3, #32]
}
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f043 0307 	orr.w	r3, r3, #7
 8001ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	609a      	str	r2, [r3, #8]
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e046      	b.n	8001fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d009      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10c      	bne.n	8001fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e03f      	b.n	800208a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe f9f0 	bl	8000404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fc25 	bl	800288c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	; 0x28
 8002096:	af02      	add	r7, sp, #8
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d17c      	bne.n	80021ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_UART_Transmit+0x2c>
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e075      	b.n	80021ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_UART_Transmit+0x3e>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e06e      	b.n	80021ae <HAL_UART_Transmit+0x11c>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2221      	movs	r2, #33	; 0x21
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e6:	f7fe fbf7 	bl	80008d8 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d108      	bne.n	8002114 <HAL_UART_Transmit+0x82>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	e003      	b.n	800211c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002124:	e02a      	b.n	800217c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fa11 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e036      	b.n	80021ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10b      	bne.n	800215e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3302      	adds	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e007      	b.n	800216e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3301      	adds	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1cf      	bne.n	8002126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f9e1 	bl	8002558 <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e006      	b.n	80021ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10d      	bne.n	800220a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_UART_IRQHandler+0x52>
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa99 	bl	800273a <UART_Receive_IT>
      return;
 8002208:	e17b      	b.n	8002502 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b1 	beq.w	8002374 <HAL_UART_IRQHandler+0x1bc>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_UART_IRQHandler+0x70>
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80a6 	beq.w	8002374 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_UART_IRQHandler+0x90>
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_UART_IRQHandler+0xb0>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0202 	orr.w	r2, r3, #2
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_UART_IRQHandler+0xd0>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00f      	beq.n	80022b2 <HAL_UART_IRQHandler+0xfa>
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <HAL_UART_IRQHandler+0xee>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0208 	orr.w	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 811e 	beq.w	80024f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_UART_IRQHandler+0x11e>
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa32 	bl	800273a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <HAL_UART_IRQHandler+0x146>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d031      	beq.n	8002362 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f974 	bl	80025ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002320:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a76      	ldr	r2, [pc, #472]	; (8002508 <HAL_UART_IRQHandler+0x350>)
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fbf2 	bl	8000b20 <HAL_DMA_Abort_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800234c:	4610      	mov	r0, r2
 800234e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	e00e      	b.n	8002370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8ec 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e00a      	b.n	8002370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8e8 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002360:	e006      	b.n	8002370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8e4 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800236e:	e0c3      	b.n	80024f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	bf00      	nop
    return;
 8002372:	e0c1      	b.n	80024f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 80a1 	bne.w	80024c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 809b 	beq.w	80024c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8095 	beq.w	80024c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04e      	beq.n	8002458 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023c4:	8a3b      	ldrh	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8098 	beq.w	80024fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d0:	8a3a      	ldrh	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	f080 8092 	bcs.w	80024fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8a3a      	ldrh	r2, [r7, #16]
 80023dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d02b      	beq.n	8002440 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0210 	bic.w	r2, r2, #16
 8002434:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fb35 	bl	8000aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f876 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002456:	e051      	b.n	80024fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d047      	beq.n	8002500 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002470:	8a7b      	ldrh	r3, [r7, #18]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d044      	beq.n	8002500 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002484:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0210 	bic.w	r2, r2, #16
 80024b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024b4:	8a7b      	ldrh	r3, [r7, #18]
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f842 	bl	8002542 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024be:	e01f      	b.n	8002500 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_UART_IRQHandler+0x324>
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f8c9 	bl	800266c <UART_Transmit_IT>
    return;
 80024da:	e012      	b.n	8002502 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <HAL_UART_IRQHandler+0x34a>
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f90a 	bl	800270a <UART_EndTransmit_IT>
    return;
 80024f6:	e004      	b.n	8002502 <HAL_UART_IRQHandler+0x34a>
    return;
 80024f8:	bf00      	nop
 80024fa:	e002      	b.n	8002502 <HAL_UART_IRQHandler+0x34a>
      return;
 80024fc:	bf00      	nop
 80024fe:	e000      	b.n	8002502 <HAL_UART_IRQHandler+0x34a>
      return;
 8002500:	bf00      	nop
  }
}
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	08002645 	.word	0x08002645

0800250c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002568:	e02c      	b.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d028      	beq.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x30>
 8002578:	f7fe f9ae 	bl	80008d8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	429a      	cmp	r2, r3
 8002586:	d21d      	bcs.n	80025c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002596:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e00f      	b.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d0c3      	beq.n	800256a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002602:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0210 	bic.w	r2, r2, #16
 800262a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff66 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b21      	cmp	r3, #33	; 0x21
 800267e:	d13e      	bne.n	80026fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002688:	d114      	bne.n	80026b4 <UART_Transmit_IT+0x48>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d110      	bne.n	80026b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]
 80026b2:	e008      	b.n	80026c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6211      	str	r1, [r2, #32]
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4619      	mov	r1, r3
 80026d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff feee 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b22      	cmp	r3, #34	; 0x22
 800274c:	f040 8099 	bne.w	8002882 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d117      	bne.n	800278a <UART_Receive_IT+0x50>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	b29a      	uxth	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
 8002788:	e026      	b.n	80027d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d007      	beq.n	80027ae <UART_Receive_IT+0x74>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <UART_Receive_IT+0x82>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e008      	b.n	80027ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d148      	bne.n	800287e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0220 	bic.w	r2, r2, #32
 80027fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	2b01      	cmp	r3, #1
 800282a:	d123      	bne.n	8002874 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0210 	bic.w	r2, r2, #16
 8002840:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b10      	cmp	r3, #16
 800284e:	d10a      	bne.n	8002866 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fe68 	bl	8002542 <HAL_UARTEx_RxEventCallback>
 8002872:	e002      	b.n	800287a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fe52 	bl	800251e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e002      	b.n	8002884 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028c6:	f023 030c 	bic.w	r3, r3, #12
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2c      	ldr	r2, [pc, #176]	; (80029a0 <UART_SetConfig+0x114>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d103      	bne.n	80028fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f4:	f7fe fef6 	bl	80016e4 <HAL_RCC_GetPCLK2Freq>
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	e002      	b.n	8002902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028fc:	f7fe fede 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8002900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009a      	lsls	r2, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <UART_SetConfig+0x118>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	0119      	lsls	r1, r3, #4
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009a      	lsls	r2, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fbb2 f2f3 	udiv	r2, r2, r3
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <UART_SetConfig+0x118>)
 800293a:	fba3 0302 	umull	r0, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2064      	movs	r0, #100	; 0x64
 8002942:	fb00 f303 	mul.w	r3, r0, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <UART_SetConfig+0x118>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	4419      	add	r1, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <UART_SetConfig+0x118>)
 8002972:	fba3 0302 	umull	r0, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2064      	movs	r0, #100	; 0x64
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	3332      	adds	r3, #50	; 0x32
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <UART_SetConfig+0x118>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	f003 020f 	and.w	r2, r3, #15
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	440a      	add	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013800 	.word	0x40013800
 80029a4:	51eb851f 	.word	0x51eb851f

080029a8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4603      	mov	r3, r0
 80029b2:	71fb      	strb	r3, [r7, #7]
 80029b4:	460b      	mov	r3, r1
 80029b6:	71bb      	strb	r3, [r7, #6]
 80029b8:	4613      	mov	r3, r2
 80029ba:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <eMBInit+0x2a>
 80029c6:	79bb      	ldrb	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80029cc:	79bb      	ldrb	r3, [r7, #6]
 80029ce:	2bf7      	cmp	r3, #247	; 0xf7
 80029d0:	d902      	bls.n	80029d8 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80029d2:	2302      	movs	r3, #2
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e03a      	b.n	8002a4e <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <eMBInit+0xb0>)
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d121      	bne.n	8002a28 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <eMBInit+0xb4>)
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <eMBInit+0xb8>)
 80029e8:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <eMBInit+0xbc>)
 80029ec:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <eMBInit+0xc0>)
 80029ee:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <eMBInit+0xc4>)
 80029f2:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <eMBInit+0xc8>)
 80029f4:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <eMBInit+0xcc>)
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <eMBInit+0xd0>)
 80029fa:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <eMBInit+0xd4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <eMBInit+0xd8>)
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <eMBInit+0xdc>)
 8002a06:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <eMBInit+0xe0>)
 8002a0a:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <eMBInit+0xe4>)
 8002a0c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <eMBInit+0xe8>)
 8002a10:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <eMBInit+0xec>)
 8002a12:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <eMBInit+0xb0>)
 8002a16:	7818      	ldrb	r0, [r3, #0]
 8002a18:	7e3b      	ldrb	r3, [r7, #24]
 8002a1a:	7979      	ldrb	r1, [r7, #5]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	f000 fd3b 	bl	8003498 <eMBRTUInit>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
            break;
 8002a26:	e001      	b.n	8002a2c <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8002a32:	f001 f80d 	bl	8003a50 <xMBPortEventInit>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e005      	b.n	8002a4e <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <eMBInit+0xf0>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <eMBInit+0xf4>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000114 	.word	0x20000114
 8002a5c:	2000011c 	.word	0x2000011c
 8002a60:	08003511 	.word	0x08003511
 8002a64:	20000120 	.word	0x20000120
 8002a68:	08003539 	.word	0x08003539
 8002a6c:	20000118 	.word	0x20000118
 8002a70:	080035f1 	.word	0x080035f1
 8002a74:	20000124 	.word	0x20000124
 8002a78:	08003555 	.word	0x08003555
 8002a7c:	20000128 	.word	0x20000128
 8002a80:	200002a4 	.word	0x200002a4
 8002a84:	080036b9 	.word	0x080036b9
 8002a88:	2000029c 	.word	0x2000029c
 8002a8c:	08003789 	.word	0x08003789
 8002a90:	200002a0 	.word	0x200002a0
 8002a94:	08003839 	.word	0x08003839
 8002a98:	20000115 	.word	0x20000115
 8002a9c:	20000009 	.word	0x20000009

08002aa0 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <eMBEnable+0x30>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d106      	bne.n	8002ac0 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <eMBEnable+0x34>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <eMBEnable+0x30>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e001      	b.n	8002ac4 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002ac0:	2306      	movs	r3, #6
 8002ac2:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000009 	.word	0x20000009
 8002ad4:	2000011c 	.word	0x2000011c

08002ad8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <eMBPoll+0x150>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8002aea:	2306      	movs	r3, #6
 8002aec:	e097      	b.n	8002c1e <eMBPoll+0x146>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002aee:	1cbb      	adds	r3, r7, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 ffcf 	bl	8003a94 <xMBPortEventGet>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 808a 	bne.w	8002c12 <eMBPoll+0x13a>
    {
        switch ( eEvent )
 8002afe:	78bb      	ldrb	r3, [r7, #2]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	f200 808b 	bhi.w	8002c1c <eMBPoll+0x144>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <eMBPoll+0x34>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002c1d 	.word	0x08002c1d
 8002b10:	08002b1d 	.word	0x08002b1d
 8002b14:	08002b4f 	.word	0x08002b4f
 8002b18:	08002c1d 	.word	0x08002c1d
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <eMBPoll+0x154>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a43      	ldr	r2, [pc, #268]	; (8002c30 <eMBPoll+0x158>)
 8002b22:	4944      	ldr	r1, [pc, #272]	; (8002c34 <eMBPoll+0x15c>)
 8002b24:	4844      	ldr	r0, [pc, #272]	; (8002c38 <eMBPoll+0x160>)
 8002b26:	4798      	blx	r3
 8002b28:	4603      	mov	r3, r0
 8002b2a:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d171      	bne.n	8002c16 <eMBPoll+0x13e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <eMBPoll+0x160>)
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <eMBPoll+0x164>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d003      	beq.n	8002b46 <eMBPoll+0x6e>
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <eMBPoll+0x160>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d167      	bne.n	8002c16 <eMBPoll+0x13e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8002b46:	2002      	movs	r0, #2
 8002b48:	f000 ff8e 	bl	8003a68 <xMBPortEventPost>
                }
            }
            break;
 8002b4c:	e063      	b.n	8002c16 <eMBPoll+0x13e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002b4e:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <eMBPoll+0x15c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <eMBPoll+0x168>)
 8002b56:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <eMBPoll+0x16c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e01f      	b.n	8002ba4 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <eMBPoll+0x170>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01d      	beq.n	8002bac <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002b70:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <eMBPoll+0x170>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <eMBPoll+0x168>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d10e      	bne.n	8002b9e <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8002b80:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <eMBPoll+0x170>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <eMBPoll+0x15c>)
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4928      	ldr	r1, [pc, #160]	; (8002c30 <eMBPoll+0x158>)
 8002b90:	4610      	mov	r0, r2
 8002b92:	4798      	blx	r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <eMBPoll+0x16c>)
 8002b9a:	701a      	strb	r2, [r3, #0]
                    break;
 8002b9c:	e007      	b.n	8002bae <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	dddc      	ble.n	8002b64 <eMBPoll+0x8c>
 8002baa:	e000      	b.n	8002bae <eMBPoll+0xd6>
                    break;
 8002bac:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <eMBPoll+0x160>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d031      	beq.n	8002c1a <eMBPoll+0x142>
            {
                if( eException != MB_EX_NONE )
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <eMBPoll+0x16c>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01d      	beq.n	8002bfa <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <eMBPoll+0x158>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <eMBPoll+0x168>)
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <eMBPoll+0x15c>)
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <eMBPoll+0x158>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	1c58      	adds	r0, r3, #1
 8002bd2:	b284      	uxth	r4, r0
 8002bd4:	4816      	ldr	r0, [pc, #88]	; (8002c30 <eMBPoll+0x158>)
 8002bd6:	8004      	strh	r4, [r0, #0]
 8002bd8:	440b      	add	r3, r1
 8002bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <eMBPoll+0x15c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <eMBPoll+0x158>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	b288      	uxth	r0, r1
 8002bee:	4910      	ldr	r1, [pc, #64]	; (8002c30 <eMBPoll+0x158>)
 8002bf0:	8008      	strh	r0, [r1, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <eMBPoll+0x16c>)
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <eMBPoll+0x174>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <eMBPoll+0x164>)
 8002c00:	7810      	ldrb	r0, [r2, #0]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <eMBPoll+0x15c>)
 8002c04:	6811      	ldr	r1, [r2, #0]
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <eMBPoll+0x158>)
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	4798      	blx	r3
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8002c10:	e003      	b.n	8002c1a <eMBPoll+0x142>

        case EV_FRAME_SENT:
            break;
        }
    }
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <eMBPoll+0x144>
            break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <eMBPoll+0x144>
            break;
 8002c1a:	bf00      	nop
    return MB_ENOERR;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000009 	.word	0x20000009
 8002c2c:	20000124 	.word	0x20000124
 8002c30:	20000134 	.word	0x20000134
 8002c34:	20000130 	.word	0x20000130
 8002c38:	2000012c 	.word	0x2000012c
 8002c3c:	20000114 	.word	0x20000114
 8002c40:	20000136 	.word	0x20000136
 8002c44:	20000137 	.word	0x20000137
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000118 	.word	0x20000118

08002c50 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8002c5c:	23ff      	movs	r3, #255	; 0xff
 8002c5e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8002c60:	23ff      	movs	r3, #255	; 0xff
 8002c62:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8002c64:	e013      	b.n	8002c8e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	7bbb      	ldrb	r3, [r7, #14]
 8002c70:	4053      	eors	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <usMBCRC16+0x64>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4053      	eors	r3, r2
 8002c82:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8002c84:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <usMBCRC16+0x68>)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4413      	add	r3, r2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	807a      	strh	r2, [r7, #2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e6      	bne.n	8002c66 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	b29b      	uxth	r3, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	08005118 	.word	0x08005118
 8002cb8:	08005218 	.word	0x08005218

08002cbc <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d16c      	bne.n	8002dac <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	8abb      	ldrh	r3, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002cec:	8abb      	ldrh	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	8a7b      	ldrh	r3, [r7, #18]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d049      	beq.n	8002da6 <eMBFuncReadCoils+0xea>
 8002d12:	8a7b      	ldrh	r3, [r7, #18]
 8002d14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d18:	d245      	bcs.n	8002da6 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	60fa      	str	r2, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002d3a:	8a7b      	ldrh	r3, [r7, #18]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	08db      	lsrs	r3, r3, #3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
 8002d50:	e003      	b.n	8002d5a <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002d52:	8a7b      	ldrh	r3, [r7, #18]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	60fa      	str	r2, [r7, #12]
 8002d60:	7dfa      	ldrb	r2, [r7, #23]
 8002d62:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002d70:	8a7a      	ldrh	r2, [r7, #18]
 8002d72:	8ab9      	ldrh	r1, [r7, #20]
 8002d74:	2300      	movs	r3, #0
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f001 f886 	bl	8003e88 <eMBRegCoilsCB>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fe40 	bl	8003a0e <prveMBError2Exception>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002d92:	e00d      	b.n	8002db0 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002da4:	e004      	b.n	8002db0 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002da6:	2303      	movs	r3, #3
 8002da8:	75bb      	strb	r3, [r7, #22]
 8002daa:	e001      	b.n	8002db0 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002dac:	2303      	movs	r3, #3
 8002dae:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d140      	bne.n	8002e52 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3302      	adds	r3, #2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	89bb      	ldrh	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002dea:	89bb      	ldrh	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d128      	bne.n	8002e4c <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002e00:	2bff      	cmp	r3, #255	; 0xff
 8002e02:	d004      	beq.n	8002e0e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3303      	adds	r3, #3
 8002e08:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11e      	bne.n	8002e4c <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3303      	adds	r3, #3
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2bff      	cmp	r3, #255	; 0xff
 8002e1a:	d102      	bne.n	8002e22 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	723b      	strb	r3, [r7, #8]
 8002e20:	e001      	b.n	8002e26 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002e26:	89b9      	ldrh	r1, [r7, #12]
 8002e28:	f107 0008 	add.w	r0, r7, #8
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f001 f82a 	bl	8003e88 <eMBRegCoilsCB>
 8002e34:	4603      	mov	r3, r0
 8002e36:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002e38:	7afb      	ldrb	r3, [r7, #11]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fde4 	bl	8003a0e <prveMBError2Exception>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002e4a:	e004      	b.n	8002e56 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e52:	2303      	movs	r3, #3
 8002e54:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d954      	bls.n	8002f20 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3302      	adds	r3, #2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	89bb      	ldrh	r3, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002e90:	89bb      	ldrh	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3303      	adds	r3, #3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	897b      	ldrh	r3, [r7, #10]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	795b      	ldrb	r3, [r3, #5]
 8002eb4:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e003      	b.n	8002ed6 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01e      	beq.n	8002f1a <eMBFuncWriteMultipleCoils+0xba>
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002ee2:	d81a      	bhi.n	8002f1a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	7a7b      	ldrb	r3, [r7, #9]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d116      	bne.n	8002f1a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1d98      	adds	r0, r3, #6
 8002ef0:	897a      	ldrh	r2, [r7, #10]
 8002ef2:	89b9      	ldrh	r1, [r7, #12]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f000 ffc7 	bl	8003e88 <eMBRegCoilsCB>
 8002efa:	4603      	mov	r3, r0
 8002efc:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002efe:	7a3b      	ldrb	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002f04:	7a3b      	ldrb	r3, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fd81 	bl	8003a0e <prveMBError2Exception>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8002f10:	e008      	b.n	8002f24 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2205      	movs	r2, #5
 8002f16:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002f18:	e004      	b.n	8002f24 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73bb      	strb	r3, [r7, #14]
 8002f1e:	e001      	b.n	8002f24 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002f20:	2303      	movs	r3, #3
 8002f22:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8002f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d16c      	bne.n	800301e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3302      	adds	r3, #2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	8abb      	ldrh	r3, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002f5e:	8abb      	ldrh	r3, [r7, #20]
 8002f60:	3301      	adds	r3, #1
 8002f62:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3303      	adds	r3, #3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002f7e:	8a7b      	ldrh	r3, [r7, #18]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d049      	beq.n	8003018 <eMBFuncReadDiscreteInputs+0xea>
 8002f84:	8a7b      	ldrh	r3, [r7, #18]
 8002f86:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f8a:	d245      	bcs.n	8003018 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002fac:	8a7b      	ldrh	r3, [r7, #18]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002fb6:	8a7b      	ldrh	r3, [r7, #18]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
 8002fc2:	e003      	b.n	8002fcc <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002fc4:	8a7b      	ldrh	r3, [r7, #18]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60fa      	str	r2, [r7, #12]
 8002fd2:	7dfa      	ldrb	r2, [r7, #23]
 8002fd4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002fe2:	8a7a      	ldrh	r2, [r7, #18]
 8002fe4:	8abb      	ldrh	r3, [r7, #20]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 ffb3 	bl	8003f54 <eMBRegDiscreteCB>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fd07 	bl	8003a0e <prveMBError2Exception>
 8003000:	4603      	mov	r3, r0
 8003002:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8003004:	e00d      	b.n	8003022 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	b29b      	uxth	r3, r3
 800300e:	4413      	add	r3, r2
 8003010:	b29a      	uxth	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003016:	e004      	b.n	8003022 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003018:	2303      	movs	r3, #3
 800301a:	75bb      	strb	r3, [r7, #22]
 800301c:	e001      	b.n	8003022 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800301e:	2303      	movs	r3, #3
 8003020:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8003022:	7dbb      	ldrb	r3, [r7, #22]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d122      	bne.n	8003088 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3302      	adds	r3, #2
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b29a      	uxth	r2, r3
 8003056:	89bb      	ldrh	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800305c:	89bb      	ldrh	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1cd8      	adds	r0, r3, #3
 8003066:	89b9      	ldrh	r1, [r7, #12]
 8003068:	2301      	movs	r3, #1
 800306a:	2201      	movs	r2, #1
 800306c:	f000 fe96 	bl	8003d9c <eMBRegHoldingCB>
 8003070:	4603      	mov	r3, r0
 8003072:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fcc6 	bl	8003a0e <prveMBError2Exception>
 8003082:	4603      	mov	r3, r0
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e001      	b.n	800308c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003088:	2303      	movs	r3, #3
 800308a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d946      	bls.n	800313a <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3301      	adds	r3, #1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3302      	adds	r3, #2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	89bb      	ldrh	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80030c6:	89bb      	ldrh	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3303      	adds	r3, #3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	795b      	ldrb	r3, [r3, #5]
 80030ea:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80030ec:	897b      	ldrh	r3, [r7, #10]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	2b78      	cmp	r3, #120	; 0x78
 80030f6:	d81d      	bhi.n	8003134 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003100:	7a7a      	ldrb	r2, [r7, #9]
 8003102:	429a      	cmp	r2, r3
 8003104:	d116      	bne.n	8003134 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	1d98      	adds	r0, r3, #6
 800310a:	897a      	ldrh	r2, [r7, #10]
 800310c:	89b9      	ldrh	r1, [r7, #12]
 800310e:	2301      	movs	r3, #1
 8003110:	f000 fe44 	bl	8003d9c <eMBRegHoldingCB>
 8003114:	4603      	mov	r3, r0
 8003116:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003118:	7a3b      	ldrb	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800311e:	7a3b      	ldrb	r3, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fc74 	bl	8003a0e <prveMBError2Exception>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800312a:	e008      	b.n	800313e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2205      	movs	r2, #5
 8003130:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003132:	e004      	b.n	800313e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003134:	2303      	movs	r3, #3
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e001      	b.n	800313e <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800313a:	2303      	movs	r3, #3
 800313c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d15c      	bne.n	8003218 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3301      	adds	r3, #1
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3302      	adds	r3, #2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	8abb      	ldrh	r3, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003178:	8abb      	ldrh	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3303      	adds	r3, #3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003192:	8a7b      	ldrh	r3, [r7, #18]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d03c      	beq.n	8003212 <eMBFuncReadHoldingRegister+0xca>
 8003198:	8a7b      	ldrh	r3, [r7, #18]
 800319a:	2b7d      	cmp	r3, #125	; 0x7d
 800319c:	d839      	bhi.n	8003212 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60fa      	str	r2, [r7, #12]
 80031ae:	2203      	movs	r2, #3
 80031b0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80031be:	8a7b      	ldrh	r3, [r7, #18]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	60f9      	str	r1, [r7, #12]
 80031c8:	0052      	lsls	r2, r2, #1
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80031da:	8a7a      	ldrh	r2, [r7, #18]
 80031dc:	8ab9      	ldrh	r1, [r7, #20]
 80031de:	2300      	movs	r3, #0
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fddb 	bl	8003d9c <eMBRegHoldingCB>
 80031e6:	4603      	mov	r3, r0
 80031e8:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fc0b 	bl	8003a0e <prveMBError2Exception>
 80031f8:	4603      	mov	r3, r0
 80031fa:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80031fc:	e00e      	b.n	800321c <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	8a7b      	ldrh	r3, [r7, #18]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	4413      	add	r3, r2
 800320a:	b29a      	uxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003210:	e004      	b.n	800321c <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003212:	2303      	movs	r3, #3
 8003214:	75fb      	strb	r3, [r7, #23]
 8003216:	e001      	b.n	800321c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003218:	2303      	movs	r3, #3
 800321a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	f240 8099 	bls.w	8003370 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3301      	adds	r3, #1
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3302      	adds	r3, #2
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b29a      	uxth	r2, r3
 8003252:	8abb      	ldrh	r3, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8003258:	8abb      	ldrh	r3, [r7, #20]
 800325a:	3301      	adds	r3, #1
 800325c:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3303      	adds	r3, #3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	8a7b      	ldrh	r3, [r7, #18]
 8003274:	4313      	orrs	r3, r2
 8003276:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3305      	adds	r3, #5
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3306      	adds	r3, #6
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b29a      	uxth	r2, r3
 800328c:	8a3b      	ldrh	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8003292:	8a3b      	ldrh	r3, [r7, #16]
 8003294:	3301      	adds	r3, #1
 8003296:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3307      	adds	r3, #7
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3308      	adds	r3, #8
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7a5b      	ldrb	r3, [r3, #9]
 80032b6:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80032b8:	8a7b      	ldrh	r3, [r7, #18]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d056      	beq.n	800336c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80032be:	8a7b      	ldrh	r3, [r7, #18]
 80032c0:	2b7d      	cmp	r3, #125	; 0x7d
 80032c2:	d853      	bhi.n	800336c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80032c4:	89fb      	ldrh	r3, [r7, #14]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d050      	beq.n	800336c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	2b79      	cmp	r3, #121	; 0x79
 80032ce:	d84d      	bhi.n	800336c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	005a      	lsls	r2, r3, #1
 80032d4:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d148      	bne.n	800336c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f103 000a 	add.w	r0, r3, #10
 80032e0:	89fa      	ldrh	r2, [r7, #14]
 80032e2:	8a39      	ldrh	r1, [r7, #16]
 80032e4:	2301      	movs	r3, #1
 80032e6:	f000 fd59 	bl	8003d9c <eMBRegHoldingCB>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80032ee:	7dbb      	ldrb	r3, [r7, #22]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d131      	bne.n	8003358 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	60ba      	str	r2, [r7, #8]
 8003304:	2217      	movs	r2, #23
 8003306:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003314:	8a7b      	ldrh	r3, [r7, #18]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	1c59      	adds	r1, r3, #1
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	0052      	lsls	r2, r2, #1
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003330:	8a7a      	ldrh	r2, [r7, #18]
 8003332:	8ab9      	ldrh	r1, [r7, #20]
 8003334:	2300      	movs	r3, #0
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f000 fd30 	bl	8003d9c <eMBRegHoldingCB>
 800333c:	4603      	mov	r3, r0
 800333e:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8003340:	7dbb      	ldrb	r3, [r7, #22]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	8a7b      	ldrh	r3, [r7, #18]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	4413      	add	r3, r2
 8003352:	b29a      	uxth	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8003358:	7dbb      	ldrb	r3, [r7, #22]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800335e:	7dbb      	ldrb	r3, [r7, #22]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fb54 	bl	8003a0e <prveMBError2Exception>
 8003366:	4603      	mov	r3, r0
 8003368:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800336a:	e001      	b.n	8003370 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800336c:	2303      	movs	r3, #3
 800336e:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8003370:	7dfb      	ldrb	r3, [r7, #23]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003384:	2300      	movs	r3, #0
 8003386:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d15f      	bne.n	8003450 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3301      	adds	r3, #1
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3302      	adds	r3, #2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	8abb      	ldrh	r3, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80033aa:	8abb      	ldrh	r3, [r7, #20]
 80033ac:	3301      	adds	r3, #1
 80033ae:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3303      	adds	r3, #3
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	8a7b      	ldrh	r3, [r7, #18]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80033ca:	8a7b      	ldrh	r3, [r7, #18]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03c      	beq.n	800344a <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80033d0:	8a7b      	ldrh	r3, [r7, #18]
 80033d2:	2b7c      	cmp	r3, #124	; 0x7c
 80033d4:	d839      	bhi.n	800344a <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60fa      	str	r2, [r7, #12]
 80033e6:	2204      	movs	r2, #4
 80033e8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80033f6:	8a7b      	ldrh	r3, [r7, #18]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	60f9      	str	r1, [r7, #12]
 8003400:	0052      	lsls	r2, r2, #1
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8003412:	8a7a      	ldrh	r2, [r7, #18]
 8003414:	8abb      	ldrh	r3, [r7, #20]
 8003416:	4619      	mov	r1, r3
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fc7b 	bl	8003d14 <eMBRegInputCB>
 800341e:	4603      	mov	r3, r0
 8003420:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003422:	7afb      	ldrb	r3, [r7, #11]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 faef 	bl	8003a0e <prveMBError2Exception>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003434:	e00e      	b.n	8003454 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	8a7b      	ldrh	r3, [r7, #18]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	b29b      	uxth	r3, r3
 8003440:	4413      	add	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003448:	e004      	b.n	8003454 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800344a:	2303      	movs	r3, #3
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e001      	b.n	8003454 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003450:	2303      	movs	r3, #3
 8003452:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <eMBFuncReportSlaveID+0x30>)
 8003470:	8812      	ldrh	r2, [r2, #0]
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <eMBFuncReportSlaveID+0x34>)
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fe07 	bl	8004088 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <eMBFuncReportSlaveID+0x30>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000158 	.word	0x20000158
 8003494:	20000138 	.word	0x20000138

08003498 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	603a      	str	r2, [r7, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	460b      	mov	r3, r1
 80034a8:	71bb      	strb	r3, [r7, #6]
 80034aa:	4613      	mov	r3, r2
 80034ac:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80034b2:	b672      	cpsid	i
}
 80034b4:	bf00      	nop

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80034b6:	797b      	ldrb	r3, [r7, #5]
 80034b8:	79b8      	ldrb	r0, [r7, #6]
 80034ba:	2208      	movs	r2, #8
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	f000 fb3f 	bl	8003b40 <xMBPortSerialInit>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 80034c8:	2303      	movs	r3, #3
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e016      	b.n	80034fc <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80034d4:	d902      	bls.n	80034dc <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80034d6:	2323      	movs	r3, #35	; 0x23
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	e005      	b.n	80034e8 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <eMBRTUInit+0x74>)
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fb63 	bl	8003bb8 <xMBPortTimersInit>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 80034f8:	2303      	movs	r3, #3
 80034fa:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80034fc:	b662      	cpsie	i
}
 80034fe:	bf00      	nop
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	00177fa0 	.word	0x00177fa0

08003510 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <eMBRTUStart+0x24>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800351e:	2100      	movs	r1, #0
 8003520:	2001      	movs	r0, #1
 8003522:	f000 fad5 	bl	8003ad0 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8003526:	f000 fb9d 	bl	8003c64 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 800352a:	b662      	cpsie	i
}
 800352c:	bf00      	nop

    EXIT_CRITICAL_SECTION(  );
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000015b 	.word	0x2000015b

08003538 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	bf00      	nop
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8003540:	2100      	movs	r1, #0
 8003542:	2000      	movs	r0, #0
 8003544:	f000 fac4 	bl	8003ad0 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8003548:	f000 fb9e 	bl	8003c88 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 800354c:	b662      	cpsie	i
}
 800354e:	bf00      	nop
    EXIT_CRITICAL_SECTION(  );
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
}
 800356a:	bf00      	nop
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <eMBRTUReceive+0x84>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d905      	bls.n	8003582 <eMBRTUReceive+0x2e>
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <eMBRTUReceive+0x88>)
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <eMBRTUReceive+0x8c>)
 800357a:	21a1      	movs	r1, #161	; 0xa1
 800357c:	4819      	ldr	r0, [pc, #100]	; (80035e4 <eMBRTUReceive+0x90>)
 800357e:	f000 fd29 	bl	8003fd4 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <eMBRTUReceive+0x84>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b03      	cmp	r3, #3
 800358a:	d91b      	bls.n	80035c4 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <eMBRTUReceive+0x84>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	4814      	ldr	r0, [pc, #80]	; (80035e8 <eMBRTUReceive+0x94>)
 8003596:	f7ff fb5b 	bl	8002c50 <usMBCRC16>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <eMBRTUReceive+0x94>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <eMBRTUReceive+0x84>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b03      	subs	r3, #3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <eMBRTUReceive+0x98>)
 80035bc:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	75bb      	strb	r3, [r7, #22]
 80035c2:	e001      	b.n	80035c8 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 80035c4:	2305      	movs	r3, #5
 80035c6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80035c8:	b662      	cpsie	i
}
 80035ca:	bf00      	nop
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000162 	.word	0x20000162
 80035dc:	08005004 	.word	0x08005004
 80035e0:	08005318 	.word	0x08005318
 80035e4:	0800502c 	.word	0x0800502c
 80035e8:	200002b0 	.word	0x200002b0
 80035ec:	200002b1 	.word	0x200002b1

080035f0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
 80035fc:	4613      	mov	r3, r2
 80035fe:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <eMBRTUSend+0xb4>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d13f      	bne.n	8003692 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <eMBRTUSend+0xb8>)
 8003618:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <eMBRTUSend+0xbc>)
 800361c:	2201      	movs	r2, #1
 800361e:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <eMBRTUSend+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8003628:	4b20      	ldr	r3, [pc, #128]	; (80036ac <eMBRTUSend+0xbc>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	88bb      	ldrh	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	b29a      	uxth	r2, r3
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <eMBRTUSend+0xbc>)
 8003636:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <eMBRTUSend+0xb8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <eMBRTUSend+0xbc>)
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	b292      	uxth	r2, r2
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fb03 	bl	8002c50 <usMBCRC16>
 800364a:	4603      	mov	r3, r0
 800364c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <eMBRTUSend+0xbc>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	b291      	uxth	r1, r2
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <eMBRTUSend+0xbc>)
 800365a:	8011      	strh	r1, [r2, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	89bb      	ldrh	r3, [r7, #12]
 8003660:	b2d9      	uxtb	r1, r3
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <eMBRTUSend+0xc0>)
 8003664:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003666:	89bb      	ldrh	r3, [r7, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	b299      	uxth	r1, r3
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <eMBRTUSend+0xbc>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	b290      	uxth	r0, r2
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <eMBRTUSend+0xbc>)
 8003678:	8010      	strh	r0, [r2, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	b2c9      	uxtb	r1, r1
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <eMBRTUSend+0xc0>)
 8003680:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <eMBRTUSend+0xc4>)
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003688:	2101      	movs	r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	f000 fa20 	bl	8003ad0 <vMBPortSerialEnable>
 8003690:	e001      	b.n	8003696 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8003692:	2305      	movs	r3, #5
 8003694:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8003696:	b662      	cpsie	i
}
 8003698:	bf00      	nop
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	2000015b 	.word	0x2000015b
 80036a8:	2000015c 	.word	0x2000015c
 80036ac:	20000160 	.word	0x20000160
 80036b0:	200002b0 	.word	0x200002b0
 80036b4:	2000015a 	.word	0x2000015a

080036b8 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <xMBRTUReceiveFSM+0xb4>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <xMBRTUReceiveFSM+0x20>
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <xMBRTUReceiveFSM+0xb8>)
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <xMBRTUReceiveFSM+0xbc>)
 80036d0:	21eb      	movs	r1, #235	; 0xeb
 80036d2:	4829      	ldr	r0, [pc, #164]	; (8003778 <xMBRTUReceiveFSM+0xc0>)
 80036d4:	f000 fc7e 	bl	8003fd4 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa5a 	bl	8003b94 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80036e0:	4b26      	ldr	r3, [pc, #152]	; (800377c <xMBRTUReceiveFSM+0xc4>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d83b      	bhi.n	8003762 <xMBRTUReceiveFSM+0xaa>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <xMBRTUReceiveFSM+0x38>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003701 	.word	0x08003701
 80036f4:	0800370d 	.word	0x0800370d
 80036f8:	08003735 	.word	0x08003735
 80036fc:	08003707 	.word	0x08003707
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8003700:	f000 fab0 	bl	8003c64 <vMBPortTimersEnable>
        break;
 8003704:	e02d      	b.n	8003762 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8003706:	f000 faad 	bl	8003c64 <vMBPortTimersEnable>
        break;
 800370a:	e02a      	b.n	8003762 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 800370e:	2200      	movs	r2, #0
 8003710:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	b291      	uxth	r1, r2
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 800371e:	8011      	strh	r1, [r2, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	79b9      	ldrb	r1, [r7, #6]
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <xMBRTUReceiveFSM+0xcc>)
 8003726:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <xMBRTUReceiveFSM+0xc4>)
 800372a:	2202      	movs	r2, #2
 800372c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800372e:	f000 fa99 	bl	8003c64 <vMBPortTimersEnable>
        break;
 8003732:	e016      	b.n	8003762 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	2bff      	cmp	r3, #255	; 0xff
 800373c:	d80b      	bhi.n	8003756 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	b291      	uxth	r1, r2
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <xMBRTUReceiveFSM+0xc8>)
 800374a:	8011      	strh	r1, [r2, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	79b9      	ldrb	r1, [r7, #6]
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <xMBRTUReceiveFSM+0xcc>)
 8003752:	5499      	strb	r1, [r3, r2]
 8003754:	e002      	b.n	800375c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <xMBRTUReceiveFSM+0xc4>)
 8003758:	2203      	movs	r2, #3
 800375a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800375c:	f000 fa82 	bl	8003c64 <vMBPortTimersEnable>
        break;
 8003760:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8003762:	79fb      	ldrb	r3, [r7, #7]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000015a 	.word	0x2000015a
 8003770:	08005040 	.word	0x08005040
 8003774:	08005328 	.word	0x08005328
 8003778:	0800502c 	.word	0x0800502c
 800377c:	2000015b 	.word	0x2000015b
 8003780:	20000162 	.word	0x20000162
 8003784:	200002b0 	.word	0x200002b0

08003788 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <xMBRTUTransmitFSM+0x94>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d006      	beq.n	80037aa <xMBRTUTransmitFSM+0x22>
 800379c:	4b20      	ldr	r3, [pc, #128]	; (8003820 <xMBRTUTransmitFSM+0x98>)
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <xMBRTUTransmitFSM+0x9c>)
 80037a0:	f44f 7193 	mov.w	r1, #294	; 0x126
 80037a4:	4820      	ldr	r0, [pc, #128]	; (8003828 <xMBRTUTransmitFSM+0xa0>)
 80037a6:	f000 fc15 	bl	8003fd4 <__assert_func>

    switch ( eSndState )
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <xMBRTUTransmitFSM+0xa4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <xMBRTUTransmitFSM+0x32>
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d005      	beq.n	80037c4 <xMBRTUTransmitFSM+0x3c>
 80037b8:	e02a      	b.n	8003810 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80037ba:	2100      	movs	r1, #0
 80037bc:	2001      	movs	r0, #1
 80037be:	f000 f987 	bl	8003ad0 <vMBPortSerialEnable>
        break;
 80037c2:	e025      	b.n	8003810 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <xMBRTUTransmitFSM+0xa8>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d013      	beq.n	80037f6 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <xMBRTUTransmitFSM+0xac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f9c4 	bl	8003b64 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <xMBRTUTransmitFSM+0xac>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <xMBRTUTransmitFSM+0xac>)
 80037e4:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <xMBRTUTransmitFSM+0xa8>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <xMBRTUTransmitFSM+0xa8>)
 80037f2:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80037f4:	e00b      	b.n	800380e <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80037f6:	2003      	movs	r0, #3
 80037f8:	f000 f936 	bl	8003a68 <xMBPortEventPost>
 80037fc:	4603      	mov	r3, r0
 80037fe:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8003800:	2100      	movs	r1, #0
 8003802:	2001      	movs	r0, #1
 8003804:	f000 f964 	bl	8003ad0 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <xMBRTUTransmitFSM+0xa4>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
        break;
 800380e:	bf00      	nop
    }

    return xNeedPoll;
 8003810:	79fb      	ldrb	r3, [r7, #7]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000015b 	.word	0x2000015b
 8003820:	0800505c 	.word	0x0800505c
 8003824:	0800533c 	.word	0x0800533c
 8003828:	0800502c 	.word	0x0800502c
 800382c:	2000015a 	.word	0x2000015a
 8003830:	20000160 	.word	0x20000160
 8003834:	2000015c 	.word	0x2000015c

08003838 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <xMBRTUTimerT35Expired+0x7c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b03      	cmp	r3, #3
 800384a:	d028      	beq.n	800389e <xMBRTUTimerT35Expired+0x66>
 800384c:	2b03      	cmp	r3, #3
 800384e:	dc10      	bgt.n	8003872 <xMBRTUTimerT35Expired+0x3a>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <xMBRTUTimerT35Expired+0x22>
 8003854:	2b02      	cmp	r3, #2
 8003856:	d006      	beq.n	8003866 <xMBRTUTimerT35Expired+0x2e>
 8003858:	e00b      	b.n	8003872 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800385a:	2000      	movs	r0, #0
 800385c:	f000 f904 	bl	8003a68 <xMBPortEventPost>
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
        break;
 8003864:	e01c      	b.n	80038a0 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003866:	2001      	movs	r0, #1
 8003868:	f000 f8fe 	bl	8003a68 <xMBPortEventPost>
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
        break;
 8003870:	e016      	b.n	80038a0 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <xMBRTUTimerT35Expired+0x7c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <xMBRTUTimerT35Expired+0x68>
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <xMBRTUTimerT35Expired+0x7c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d00c      	beq.n	80038a0 <xMBRTUTimerT35Expired+0x68>
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <xMBRTUTimerT35Expired+0x7c>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d007      	beq.n	80038a0 <xMBRTUTimerT35Expired+0x68>
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <xMBRTUTimerT35Expired+0x80>)
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <xMBRTUTimerT35Expired+0x84>)
 8003894:	f240 115f 	movw	r1, #351	; 0x15f
 8003898:	4809      	ldr	r0, [pc, #36]	; (80038c0 <xMBRTUTimerT35Expired+0x88>)
 800389a:	f000 fb9b 	bl	8003fd4 <__assert_func>
        break;
 800389e:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80038a0:	f000 f9f2 	bl	8003c88 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <xMBRTUTimerT35Expired+0x7c>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80038aa:	79fb      	ldrb	r3, [r7, #7]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	2000015b 	.word	0x2000015b
 80038b8:	08005078 	.word	0x08005078
 80038bc:	08005350 	.word	0x08005350
 80038c0:	0800502c 	.word	0x0800502c

080038c4 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	807b      	strh	r3, [r7, #2]
 80038d6:	460b      	mov	r3, r1
 80038d8:	707b      	strb	r3, [r7, #1]
 80038da:	4613      	mov	r3, r2
 80038dc:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 80038de:	783b      	ldrb	r3, [r7, #0]
 80038e0:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 80038e2:	787b      	ldrb	r3, [r7, #1]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d905      	bls.n	80038f4 <xMBUtilSetBits+0x30>
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <xMBUtilSetBits+0xcc>)
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <xMBUtilSetBits+0xd0>)
 80038ec:	2138      	movs	r1, #56	; 0x38
 80038ee:	482a      	ldr	r0, [pc, #168]	; (8003998 <xMBUtilSetBits+0xd4>)
 80038f0:	f000 fb70 	bl	8003fd4 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	08db      	lsrs	r3, r3, #3
 80038f8:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80038fa:	8abb      	ldrh	r3, [r7, #20]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	b29b      	uxth	r3, r3
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003906:	8afa      	ldrh	r2, [r7, #22]
 8003908:	8a7b      	ldrh	r3, [r7, #18]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2201      	movs	r2, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 800391e:	8a3a      	ldrh	r2, [r7, #16]
 8003920:	8879      	ldrh	r1, [r7, #2]
 8003922:	8abb      	ldrh	r3, [r7, #20]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	1acb      	subs	r3, r1, r3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800392e:	8abb      	ldrh	r3, [r7, #20]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003938:	8abb      	ldrh	r3, [r7, #20]
 800393a:	3301      	adds	r3, #1
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	b21a      	sxth	r2, r3
 8003946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800394a:	4313      	orrs	r3, r2
 800394c:	b21b      	sxth	r3, r3
 800394e:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8003950:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	b21a      	sxth	r2, r3
 8003958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800395c:	4013      	ands	r3, r2
 800395e:	b21a      	sxth	r2, r3
 8003960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003964:	4313      	orrs	r3, r2
 8003966:	b21b      	sxth	r3, r3
 8003968:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800396a:	8abb      	ldrh	r3, [r7, #20]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	89fa      	ldrh	r2, [r7, #14]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	b299      	uxth	r1, r3
 800397c:	8abb      	ldrh	r3, [r7, #20]
 800397e:	3301      	adds	r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	b2ca      	uxtb	r2, r1
 8003986:	701a      	strb	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	080050dc 	.word	0x080050dc
 8003994:	08005368 	.word	0x08005368
 8003998:	080050ec 	.word	0x080050ec

0800399c <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
 80039a8:	4613      	mov	r3, r2
 80039aa:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	887a      	ldrh	r2, [r7, #2]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80039be:	787b      	ldrb	r3, [r7, #1]
 80039c0:	2201      	movs	r2, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	3301      	adds	r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80039ee:	893a      	ldrh	r2, [r7, #8]
 80039f0:	89bb      	ldrh	r3, [r7, #12]
 80039f2:	fa42 f303 	asr.w	r3, r2, r3
 80039f6:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80039f8:	893a      	ldrh	r2, [r7, #8]
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	4013      	ands	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	b2db      	uxtb	r3, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b07      	cmp	r3, #7
 8003a1c:	d00c      	beq.n	8003a38 <prveMBError2Exception+0x2a>
 8003a1e:	2b07      	cmp	r3, #7
 8003a20:	dc0d      	bgt.n	8003a3e <prveMBError2Exception+0x30>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <prveMBError2Exception+0x1e>
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d003      	beq.n	8003a32 <prveMBError2Exception+0x24>
 8003a2a:	e008      	b.n	8003a3e <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
            break;
 8003a30:	e008      	b.n	8003a44 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8003a32:	2302      	movs	r3, #2
 8003a34:	73fb      	strb	r3, [r7, #15]
            break;
 8003a36:	e005      	b.n	8003a44 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8003a38:	2306      	movs	r3, #6
 8003a3a:	73fb      	strb	r3, [r7, #15]
            break;
 8003a3c:	e002      	b.n	8003a44 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	73fb      	strb	r3, [r7, #15]
            break;
 8003a42:	bf00      	nop
    }

    return eStatus;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <xMBPortEventInit+0x14>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	20000165 	.word	0x20000165

08003a68 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <xMBPortEventPost+0x24>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8003a78:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <xMBPortEventPost+0x28>)
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000165 	.word	0x20000165
 8003a90:	20000164 	.word	0x20000164

08003a94 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <xMBPortEventGet+0x34>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <xMBPortEventGet+0x38>)
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <xMBPortEventGet+0x34>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000165 	.word	0x20000165
 8003acc:	20000164 	.word	0x20000164

08003ad0 <vMBPortSerialEnable>:
#define _huart huart1
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	71fb      	strb	r3, [r7, #7]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&_huart, UART_IT_RXNE);
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0220 	orr.w	r2, r2, #32
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e007      	b.n	8003b08 <vMBPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&_huart, UART_IT_RXNE);
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0220 	bic.w	r2, r2, #32
 8003b06:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&_huart, UART_IT_TXE);
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b1c:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&_huart, UART_IT_TXE);
  }  
}
 8003b1e:	e007      	b.n	8003b30 <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&_huart, UART_IT_TXE);
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <vMBPortSerialEnable+0x6c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b2e:	60da      	str	r2, [r3, #12]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	200001c4 	.word	0x200001c4

08003b40 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6039      	str	r1, [r7, #0]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
 8003b50:	460b      	mov	r3, r1
 8003b52:	71bb      	strb	r3, [r7, #6]
 8003b54:	4613      	mov	r3, r2
 8003b56:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&_huart, (uint8_t*)&ucByte, 1, 10));
 8003b6e:	1df9      	adds	r1, r7, #7
 8003b70:	230a      	movs	r3, #10
 8003b72:	2201      	movs	r2, #1
 8003b74:	4806      	ldr	r0, [pc, #24]	; (8003b90 <xMBPortSerialPutByte+0x2c>)
 8003b76:	f7fe fa8c 	bl	8002092 <HAL_UART_Transmit>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200001c4 	.word	0x200001c4

08003b94 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(_huart.Instance->DR & (uint8_t)0x00FF);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <xMBPortSerialGetByte+0x20>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	200001c4 	.word	0x200001c4

08003bb8 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80fb      	strh	r3, [r7, #6]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003be4:	2247      	movs	r2, #71	; 0x47
 8003be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003bf0:	2231      	movs	r2, #49	; 0x31
 8003bf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]

  timeout = usTim1Timerout50us;
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <xMBPortTimersInit+0xa8>)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	8013      	strh	r3, [r2, #0]

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c06:	4815      	ldr	r0, [pc, #84]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003c08:	f7fd fdce 	bl	80017a8 <HAL_TIM_Base_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <xMBPortTimersInit+0x5e>
  {
    return FALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e01d      	b.n	8003c52 <xMBPortTimersInit+0x9a>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c1c:	f107 0310 	add.w	r3, r7, #16
 8003c20:	4619      	mov	r1, r3
 8003c22:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003c24:	f7fd ff98 	bl	8001b58 <HAL_TIM_ConfigClockSource>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <xMBPortTimersInit+0x7a>
  {
	  return FALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e00f      	b.n	8003c52 <xMBPortTimersInit+0x9a>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c32:	2320      	movs	r3, #32
 8003c34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4806      	ldr	r0, [pc, #24]	; (8003c5c <xMBPortTimersInit+0xa4>)
 8003c42:	f7fe f969 	bl	8001f18 <HAL_TIMEx_MasterConfigSynchronization>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <xMBPortTimersInit+0x98>
  {
	  return FALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <xMBPortTimersInit+0x9a>
  }
  return TRUE;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000208 	.word	0x20000208
 8003c60:	20000166 	.word	0x20000166

08003c64 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <vMBPortTimersEnable+0x18>)
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <vMBPortTimersEnable+0x1c>)
 8003c6e:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&_htim);
 8003c70:	4804      	ldr	r0, [pc, #16]	; (8003c84 <vMBPortTimersEnable+0x20>)
 8003c72:	f7fd fde9 	bl	8001848 <HAL_TIM_Base_Start_IT>
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000166 	.word	0x20000166
 8003c80:	20000168 	.word	0x20000168
 8003c84:	20000208 	.word	0x20000208

08003c88 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&_htim);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <vMBPortTimersDisable+0x10>)
 8003c8e:	f7fd fe2d 	bl	80018ec <HAL_TIM_Base_Stop_IT>
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000208 	.word	0x20000208

08003c9c <setup>:
uint16_t usDescreteStart = REG_DESCRETES_INPUT_START;
uint8_t usDescreteBuf[(REG_DESCRETES_INPUT_NREGS / 8)+1];       	// Mảng 1bit  lưu giá trị của Descretes Input (Read Only)

eMBErrorCode eStatus;

void setup(){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af02      	add	r7, sp, #8

  usRegInputBuf[0] = 11;
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <setup+0x64>)
 8003ca4:	220b      	movs	r2, #11
 8003ca6:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 8003ca8:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <setup+0x64>)
 8003caa:	2216      	movs	r2, #22
 8003cac:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <setup+0x64>)
 8003cb0:	2221      	movs	r2, #33	; 0x21
 8003cb2:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <setup+0x64>)
 8003cb6:	222c      	movs	r2, #44	; 0x2c
 8003cb8:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <setup+0x64>)
 8003cbc:	2237      	movs	r2, #55	; 0x37
 8003cbe:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <setup+0x64>)
 8003cc2:	2242      	movs	r2, #66	; 0x42
 8003cc4:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <setup+0x64>)
 8003cc8:	224d      	movs	r2, #77	; 0x4d
 8003cca:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <setup+0x64>)
 8003cce:	2258      	movs	r2, #88	; 0x58
 8003cd0:	81da      	strh	r2, [r3, #14]

  eStatus = eMBInit( MB_RTU, 1, 3, 115200, MB_PAR_NONE);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cda:	2203      	movs	r2, #3
 8003cdc:	2101      	movs	r1, #1
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f7fe fe62 	bl	80029a8 <eMBInit>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <setup+0x68>)
 8003cea:	701a      	strb	r2, [r3, #0]
  eStatus = eMBEnable();
 8003cec:	f7fe fed8 	bl	8002aa0 <eMBEnable>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <setup+0x68>)
 8003cf6:	701a      	strb	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000016c 	.word	0x2000016c
 8003d04:	200001bb 	.word	0x200001bb

08003d08 <loop>:

void loop(){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	eMBPoll();
 8003d0c:	f7fe fee4 	bl	8002ad8 <eMBPoll>
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <eMBRegInputCB>:

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d2e:	d327      	bcc.n	8003d80 <eMBRegInputCB+0x6c>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8003d30:	887a      	ldrh	r2, [r7, #2]
 8003d32:	883b      	ldrh	r3, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8003d3a:	dc21      	bgt.n	8003d80 <eMBRegInputCB+0x6c>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <eMBRegInputCB+0x80>)
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 8003d46:	883b      	ldrh	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <eMBRegInputCB+0x72>
        {
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8003d4c:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <eMBRegInputCB+0x84>)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d54:	1219      	asrs	r1, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	b2ca      	uxtb	r2, r1
 8003d5e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <eMBRegInputCB+0x84>)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	b2ca      	uxtb	r2, r1
 8003d70:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 8003d78:	883b      	ldrh	r3, [r7, #0]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 8003d7e:	e7e2      	b.n	8003d46 <eMBRegInputCB+0x32>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e000      	b.n	8003d88 <eMBRegInputCB+0x74>
    if( ( usAddress >= REG_INPUT_START )
 8003d86:	bf00      	nop
    }

    return eStatus;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	2000008c 	.word	0x2000008c
 8003d98:	2000016c 	.word	0x2000016c

08003d9c <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	4608      	mov	r0, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	460b      	mov	r3, r1
 8003db0:	813b      	strh	r3, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    int             iRegIndex;

    if( ( usAddress >= REG_HOLDING_START ) &&
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003dc0:	d353      	bcc.n	8003e6a <eMBRegHoldingCB+0xce>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 8003dc2:	897a      	ldrh	r2, [r7, #10]
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	4413      	add	r3, r2
    if( ( usAddress >= REG_HOLDING_START ) &&
 8003dc8:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8003dcc:	dc4d      	bgt.n	8003e6a <eMBRegHoldingCB+0xce>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <eMBRegHoldingCB+0xe4>)
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        switch ( eMode )
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <eMBRegHoldingCB+0x48>
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d01d      	beq.n	8003e1e <eMBRegHoldingCB+0x82>
 8003de2:	e045      	b.n	8003e70 <eMBRegHoldingCB+0xd4>
        {
            /* Pass current register values to the protocol stack. */
        case MB_REG_READ:
            while( usNRegs > 0 )
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d03d      	beq.n	8003e66 <eMBRegHoldingCB+0xca>
            {
                *pucRegBuffer++ = ( UCHAR )( usRegHoldingBuf[iRegIndex] >> 8 );
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <eMBRegHoldingCB+0xe8>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df2:	1219      	asrs	r1, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60fa      	str	r2, [r7, #12]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( UCHAR )( usRegHoldingBuf[iRegIndex] & 0xFF );
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <eMBRegHoldingCB+0xe8>)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	60fa      	str	r2, [r7, #12]
 8003e0c:	b2ca      	uxtb	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3301      	adds	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
                usNRegs--;
 8003e16:	893b      	ldrh	r3, [r7, #8]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 8003e1c:	e7e2      	b.n	8003de4 <eMBRegHoldingCB+0x48>
            break;

            /* Update current register values with new values from the
             * protocol stack. */
        case MB_REG_WRITE:
            while( usNRegs > 0 )
 8003e1e:	893b      	ldrh	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d025      	beq.n	8003e70 <eMBRegHoldingCB+0xd4>
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	60fa      	str	r2, [r7, #12]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	b299      	uxth	r1, r3
 8003e32:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <eMBRegHoldingCB+0xe8>)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	60fa      	str	r2, [r7, #12]
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <eMBRegHoldingCB+0xe8>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003e4a:	b28b      	uxth	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b299      	uxth	r1, r3
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <eMBRegHoldingCB+0xe8>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                iRegIndex++;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	613b      	str	r3, [r7, #16]
                usNRegs--;
 8003e5e:	893b      	ldrh	r3, [r7, #8]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	813b      	strh	r3, [r7, #8]
            while( usNRegs > 0 )
 8003e64:	e7db      	b.n	8003e1e <eMBRegHoldingCB+0x82>
            break;
 8003e66:	bf00      	nop
        switch ( eMode )
 8003e68:	e002      	b.n	8003e70 <eMBRegHoldingCB+0xd4>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
 8003e6e:	e000      	b.n	8003e72 <eMBRegHoldingCB+0xd6>
        switch ( eMode )
 8003e70:	bf00      	nop
    }
    return eStatus;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000008e 	.word	0x2000008e
 8003e84:	2000018c 	.word	0x2000018c

08003e88 <eMBRegCoilsCB>:

eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	813b      	strh	r3, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
   eMBErrorCode    eStatus = MB_ENOERR;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	77fb      	strb	r3, [r7, #31]
   int             iRegIndex;

   if( ( usAddress >= REG_COIL_START ) &&
       ( usAddress + usNCoils <= REG_COIL_START + REG_COIL_NREGS ) )
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	4413      	add	r3, r2
   if( ( usAddress >= REG_COIL_START ) &&
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	dc44      	bgt.n	8003f3a <eMBRegCoilsCB+0xb2>
   {
       iRegIndex = ( int )( usAddress - usCoilStart );
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <eMBRegCoilsCB+0xc4>)
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
       switch ( eMode )
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <eMBRegCoilsCB+0x3e>
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d01d      	beq.n	8003f00 <eMBRegCoilsCB+0x78>
 8003ec4:	e03d      	b.n	8003f42 <eMBRegCoilsCB+0xba>
       {
           /* Pass current register values to the protocol stack. */
       case MB_REG_READ:
           while( usNCoils > 0 )
 8003ec6:	893b      	ldrh	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d039      	beq.n	8003f40 <eMBRegCoilsCB+0xb8>
           {
        	   UCHAR ucResult = xMBUtilGetBits( usCoilBuf, iRegIndex, 1 );
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	481e      	ldr	r0, [pc, #120]	; (8003f50 <eMBRegCoilsCB+0xc8>)
 8003ed6:	f7ff fd61 	bl	800399c <xMBUtilGetBits>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75bb      	strb	r3, [r7, #22]
        	   xMBUtilSetBits( pucRegBuffer, iRegIndex - ( usAddress - REG_COIL_START ), 1, ucResult );
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	7dbb      	ldrb	r3, [r7, #22]
 8003eea:	2201      	movs	r2, #1
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff fce9 	bl	80038c4 <xMBUtilSetBits>
               iRegIndex++;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61bb      	str	r3, [r7, #24]
               usNCoils--;
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	813b      	strh	r3, [r7, #8]
           while( usNCoils > 0 )
 8003efe:	e7e2      	b.n	8003ec6 <eMBRegCoilsCB+0x3e>
           }
           break;
       case MB_REG_WRITE:
           while( usNCoils > 0 )
 8003f00:	893b      	ldrh	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01d      	beq.n	8003f42 <eMBRegCoilsCB+0xba>
           {
        	   UCHAR ucResult = xMBUtilGetBits( pucRegBuffer, iRegIndex - ( usAddress - REG_COIL_START ), 1 );
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2201      	movs	r2, #1
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff fd41 	bl	800399c <xMBUtilGetBits>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	75fb      	strb	r3, [r7, #23]
        	   xMBUtilSetBits( usCoilBuf, iRegIndex, 1, ucResult );
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	b299      	uxth	r1, r3
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2201      	movs	r2, #1
 8003f26:	480a      	ldr	r0, [pc, #40]	; (8003f50 <eMBRegCoilsCB+0xc8>)
 8003f28:	f7ff fccc 	bl	80038c4 <xMBUtilSetBits>
               iRegIndex++;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
               usNCoils--;
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	813b      	strh	r3, [r7, #8]
           while( usNCoils > 0 )
 8003f38:	e7e2      	b.n	8003f00 <eMBRegCoilsCB+0x78>
           }
       }
   }
   else
   {
       eStatus = MB_ENOREG;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e000      	b.n	8003f42 <eMBRegCoilsCB+0xba>
           break;
 8003f40:	bf00      	nop
   }
   return eStatus;
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200001ac 	.word	0x200001ac
 8003f50:	200001b0 	.word	0x200001b0

08003f54 <eMBRegDiscreteCB>:
eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
 8003f60:	4613      	mov	r3, r2
 8003f62:	803b      	strh	r3, [r7, #0]
   eMBErrorCode    eStatus = MB_ENOERR;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]
   int             iRegIndex;
   if( ( usAddress >= REG_DESCRETES_INPUT_START )
       && ( usAddress + usNDiscrete <= REG_DESCRETES_INPUT_START + REG_DESCRETES_INPUT_NREGS) )
 8003f68:	887a      	ldrh	r2, [r7, #2]
 8003f6a:	883b      	ldrh	r3, [r7, #0]
 8003f6c:	4413      	add	r3, r2
   if( ( usAddress >= REG_DESCRETES_INPUT_START )
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	dc25      	bgt.n	8003fbe <eMBRegDiscreteCB+0x6a>
   {
       iRegIndex = ( int )( usAddress - usDescreteStart );
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <eMBRegDiscreteCB+0x78>)
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
       while( usNDiscrete > 0 )
 8003f7c:	883b      	ldrh	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01f      	beq.n	8003fc2 <eMBRegDiscreteCB+0x6e>
       {
    	   UCHAR ucResult = xMBUtilGetBits( usDescreteBuf, iRegIndex, 1 );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2201      	movs	r2, #1
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4811      	ldr	r0, [pc, #68]	; (8003fd0 <eMBRegDiscreteCB+0x7c>)
 8003f8c:	f7ff fd06 	bl	800399c <xMBUtilGetBits>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
    	   xMBUtilSetBits( pucRegBuffer, iRegIndex - ( usAddress - usDescreteStart ), 1, ucResult );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <eMBRegDiscreteCB+0x78>)
 8003f9a:	8819      	ldrh	r1, [r3, #0]
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	1acb      	subs	r3, r1, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	b299      	uxth	r1, r3
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fc8a 	bl	80038c4 <xMBUtilSetBits>
           iRegIndex++;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
           usNDiscrete--;
 8003fb6:	883b      	ldrh	r3, [r7, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	803b      	strh	r3, [r7, #0]
       while( usNDiscrete > 0 )
 8003fbc:	e7de      	b.n	8003f7c <eMBRegDiscreteCB+0x28>
       }
   }
   else
   {
       eStatus = MB_ENOREG;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
   }
   return eStatus;
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	200001b4 	.word	0x200001b4
 8003fd0:	200001b8 	.word	0x200001b8

08003fd4 <__assert_func>:
 8003fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fd6:	4614      	mov	r4, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <__assert_func+0x2c>)
 8003fdc:	4605      	mov	r5, r0
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68d8      	ldr	r0, [r3, #12]
 8003fe2:	b14c      	cbz	r4, 8003ff8 <__assert_func+0x24>
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <__assert_func+0x30>)
 8003fe6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003fea:	9100      	str	r1, [sp, #0]
 8003fec:	462b      	mov	r3, r5
 8003fee:	4906      	ldr	r1, [pc, #24]	; (8004008 <__assert_func+0x34>)
 8003ff0:	f000 f814 	bl	800401c <fiprintf>
 8003ff4:	f000 fc0c 	bl	8004810 <abort>
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <__assert_func+0x38>)
 8003ffa:	461c      	mov	r4, r3
 8003ffc:	e7f3      	b.n	8003fe6 <__assert_func+0x12>
 8003ffe:	bf00      	nop
 8004000:	20000090 	.word	0x20000090
 8004004:	08005377 	.word	0x08005377
 8004008:	08005384 	.word	0x08005384
 800400c:	080053b2 	.word	0x080053b2

08004010 <__errno>:
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <__errno+0x8>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000090 	.word	0x20000090

0800401c <fiprintf>:
 800401c:	b40e      	push	{r1, r2, r3}
 800401e:	b503      	push	{r0, r1, lr}
 8004020:	4601      	mov	r1, r0
 8004022:	ab03      	add	r3, sp, #12
 8004024:	4805      	ldr	r0, [pc, #20]	; (800403c <fiprintf+0x20>)
 8004026:	f853 2b04 	ldr.w	r2, [r3], #4
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	f000 f869 	bl	8004104 <_vfiprintf_r>
 8004032:	b002      	add	sp, #8
 8004034:	f85d eb04 	ldr.w	lr, [sp], #4
 8004038:	b003      	add	sp, #12
 800403a:	4770      	bx	lr
 800403c:	20000090 	.word	0x20000090

08004040 <__libc_init_array>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2600      	movs	r6, #0
 8004044:	4d0c      	ldr	r5, [pc, #48]	; (8004078 <__libc_init_array+0x38>)
 8004046:	4c0d      	ldr	r4, [pc, #52]	; (800407c <__libc_init_array+0x3c>)
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	42a6      	cmp	r6, r4
 800404e:	d109      	bne.n	8004064 <__libc_init_array+0x24>
 8004050:	f000 ffc4 	bl	8004fdc <_init>
 8004054:	2600      	movs	r6, #0
 8004056:	4d0a      	ldr	r5, [pc, #40]	; (8004080 <__libc_init_array+0x40>)
 8004058:	4c0a      	ldr	r4, [pc, #40]	; (8004084 <__libc_init_array+0x44>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	42a6      	cmp	r6, r4
 8004060:	d105      	bne.n	800406e <__libc_init_array+0x2e>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	f855 3b04 	ldr.w	r3, [r5], #4
 8004068:	4798      	blx	r3
 800406a:	3601      	adds	r6, #1
 800406c:	e7ee      	b.n	800404c <__libc_init_array+0xc>
 800406e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004072:	4798      	blx	r3
 8004074:	3601      	adds	r6, #1
 8004076:	e7f2      	b.n	800405e <__libc_init_array+0x1e>
 8004078:	0800544c 	.word	0x0800544c
 800407c:	0800544c 	.word	0x0800544c
 8004080:	0800544c 	.word	0x0800544c
 8004084:	08005450 	.word	0x08005450

08004088 <memcpy>:
 8004088:	440a      	add	r2, r1
 800408a:	4291      	cmp	r1, r2
 800408c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004090:	d100      	bne.n	8004094 <memcpy+0xc>
 8004092:	4770      	bx	lr
 8004094:	b510      	push	{r4, lr}
 8004096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409a:	4291      	cmp	r1, r2
 800409c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a0:	d1f9      	bne.n	8004096 <memcpy+0xe>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <memset>:
 80040a4:	4603      	mov	r3, r0
 80040a6:	4402      	add	r2, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <__sfputc_r>:
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	b410      	push	{r4}
 80040b8:	3b01      	subs	r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	6093      	str	r3, [r2, #8]
 80040be:	da07      	bge.n	80040d0 <__sfputc_r+0x1c>
 80040c0:	6994      	ldr	r4, [r2, #24]
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	db01      	blt.n	80040ca <__sfputc_r+0x16>
 80040c6:	290a      	cmp	r1, #10
 80040c8:	d102      	bne.n	80040d0 <__sfputc_r+0x1c>
 80040ca:	bc10      	pop	{r4}
 80040cc:	f000 bae0 	b.w	8004690 <__swbuf_r>
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	1c58      	adds	r0, r3, #1
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	7019      	strb	r1, [r3, #0]
 80040d8:	4608      	mov	r0, r1
 80040da:	bc10      	pop	{r4}
 80040dc:	4770      	bx	lr

080040de <__sfputs_r>:
 80040de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e0:	4606      	mov	r6, r0
 80040e2:	460f      	mov	r7, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	18d5      	adds	r5, r2, r3
 80040e8:	42ac      	cmp	r4, r5
 80040ea:	d101      	bne.n	80040f0 <__sfputs_r+0x12>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e007      	b.n	8004100 <__sfputs_r+0x22>
 80040f0:	463a      	mov	r2, r7
 80040f2:	4630      	mov	r0, r6
 80040f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f8:	f7ff ffdc 	bl	80040b4 <__sfputc_r>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d1f3      	bne.n	80040e8 <__sfputs_r+0xa>
 8004100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004104 <_vfiprintf_r>:
 8004104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004108:	460d      	mov	r5, r1
 800410a:	4614      	mov	r4, r2
 800410c:	4698      	mov	r8, r3
 800410e:	4606      	mov	r6, r0
 8004110:	b09d      	sub	sp, #116	; 0x74
 8004112:	b118      	cbz	r0, 800411c <_vfiprintf_r+0x18>
 8004114:	6983      	ldr	r3, [r0, #24]
 8004116:	b90b      	cbnz	r3, 800411c <_vfiprintf_r+0x18>
 8004118:	f000 fc9c 	bl	8004a54 <__sinit>
 800411c:	4b89      	ldr	r3, [pc, #548]	; (8004344 <_vfiprintf_r+0x240>)
 800411e:	429d      	cmp	r5, r3
 8004120:	d11b      	bne.n	800415a <_vfiprintf_r+0x56>
 8004122:	6875      	ldr	r5, [r6, #4]
 8004124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004126:	07d9      	lsls	r1, r3, #31
 8004128:	d405      	bmi.n	8004136 <_vfiprintf_r+0x32>
 800412a:	89ab      	ldrh	r3, [r5, #12]
 800412c:	059a      	lsls	r2, r3, #22
 800412e:	d402      	bmi.n	8004136 <_vfiprintf_r+0x32>
 8004130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004132:	f000 fd2d 	bl	8004b90 <__retarget_lock_acquire_recursive>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	d501      	bpl.n	8004140 <_vfiprintf_r+0x3c>
 800413c:	692b      	ldr	r3, [r5, #16]
 800413e:	b9eb      	cbnz	r3, 800417c <_vfiprintf_r+0x78>
 8004140:	4629      	mov	r1, r5
 8004142:	4630      	mov	r0, r6
 8004144:	f000 faf6 	bl	8004734 <__swsetup_r>
 8004148:	b1c0      	cbz	r0, 800417c <_vfiprintf_r+0x78>
 800414a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800414c:	07dc      	lsls	r4, r3, #31
 800414e:	d50e      	bpl.n	800416e <_vfiprintf_r+0x6a>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b01d      	add	sp, #116	; 0x74
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	4b7b      	ldr	r3, [pc, #492]	; (8004348 <_vfiprintf_r+0x244>)
 800415c:	429d      	cmp	r5, r3
 800415e:	d101      	bne.n	8004164 <_vfiprintf_r+0x60>
 8004160:	68b5      	ldr	r5, [r6, #8]
 8004162:	e7df      	b.n	8004124 <_vfiprintf_r+0x20>
 8004164:	4b79      	ldr	r3, [pc, #484]	; (800434c <_vfiprintf_r+0x248>)
 8004166:	429d      	cmp	r5, r3
 8004168:	bf08      	it	eq
 800416a:	68f5      	ldreq	r5, [r6, #12]
 800416c:	e7da      	b.n	8004124 <_vfiprintf_r+0x20>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	0598      	lsls	r0, r3, #22
 8004172:	d4ed      	bmi.n	8004150 <_vfiprintf_r+0x4c>
 8004174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004176:	f000 fd0c 	bl	8004b92 <__retarget_lock_release_recursive>
 800417a:	e7e9      	b.n	8004150 <_vfiprintf_r+0x4c>
 800417c:	2300      	movs	r3, #0
 800417e:	9309      	str	r3, [sp, #36]	; 0x24
 8004180:	2320      	movs	r3, #32
 8004182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004186:	2330      	movs	r3, #48	; 0x30
 8004188:	f04f 0901 	mov.w	r9, #1
 800418c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004190:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004350 <_vfiprintf_r+0x24c>
 8004194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004198:	4623      	mov	r3, r4
 800419a:	469a      	mov	sl, r3
 800419c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a0:	b10a      	cbz	r2, 80041a6 <_vfiprintf_r+0xa2>
 80041a2:	2a25      	cmp	r2, #37	; 0x25
 80041a4:	d1f9      	bne.n	800419a <_vfiprintf_r+0x96>
 80041a6:	ebba 0b04 	subs.w	fp, sl, r4
 80041aa:	d00b      	beq.n	80041c4 <_vfiprintf_r+0xc0>
 80041ac:	465b      	mov	r3, fp
 80041ae:	4622      	mov	r2, r4
 80041b0:	4629      	mov	r1, r5
 80041b2:	4630      	mov	r0, r6
 80041b4:	f7ff ff93 	bl	80040de <__sfputs_r>
 80041b8:	3001      	adds	r0, #1
 80041ba:	f000 80aa 	beq.w	8004312 <_vfiprintf_r+0x20e>
 80041be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041c0:	445a      	add	r2, fp
 80041c2:	9209      	str	r2, [sp, #36]	; 0x24
 80041c4:	f89a 3000 	ldrb.w	r3, [sl]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a2 	beq.w	8004312 <_vfiprintf_r+0x20e>
 80041ce:	2300      	movs	r3, #0
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d8:	f10a 0a01 	add.w	sl, sl, #1
 80041dc:	9304      	str	r3, [sp, #16]
 80041de:	9307      	str	r3, [sp, #28]
 80041e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041e4:	931a      	str	r3, [sp, #104]	; 0x68
 80041e6:	4654      	mov	r4, sl
 80041e8:	2205      	movs	r2, #5
 80041ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ee:	4858      	ldr	r0, [pc, #352]	; (8004350 <_vfiprintf_r+0x24c>)
 80041f0:	f000 fd34 	bl	8004c5c <memchr>
 80041f4:	9a04      	ldr	r2, [sp, #16]
 80041f6:	b9d8      	cbnz	r0, 8004230 <_vfiprintf_r+0x12c>
 80041f8:	06d1      	lsls	r1, r2, #27
 80041fa:	bf44      	itt	mi
 80041fc:	2320      	movmi	r3, #32
 80041fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004202:	0713      	lsls	r3, r2, #28
 8004204:	bf44      	itt	mi
 8004206:	232b      	movmi	r3, #43	; 0x2b
 8004208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800420c:	f89a 3000 	ldrb.w	r3, [sl]
 8004210:	2b2a      	cmp	r3, #42	; 0x2a
 8004212:	d015      	beq.n	8004240 <_vfiprintf_r+0x13c>
 8004214:	4654      	mov	r4, sl
 8004216:	2000      	movs	r0, #0
 8004218:	f04f 0c0a 	mov.w	ip, #10
 800421c:	9a07      	ldr	r2, [sp, #28]
 800421e:	4621      	mov	r1, r4
 8004220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004224:	3b30      	subs	r3, #48	; 0x30
 8004226:	2b09      	cmp	r3, #9
 8004228:	d94e      	bls.n	80042c8 <_vfiprintf_r+0x1c4>
 800422a:	b1b0      	cbz	r0, 800425a <_vfiprintf_r+0x156>
 800422c:	9207      	str	r2, [sp, #28]
 800422e:	e014      	b.n	800425a <_vfiprintf_r+0x156>
 8004230:	eba0 0308 	sub.w	r3, r0, r8
 8004234:	fa09 f303 	lsl.w	r3, r9, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	46a2      	mov	sl, r4
 800423c:	9304      	str	r3, [sp, #16]
 800423e:	e7d2      	b.n	80041e6 <_vfiprintf_r+0xe2>
 8004240:	9b03      	ldr	r3, [sp, #12]
 8004242:	1d19      	adds	r1, r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	9103      	str	r1, [sp, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	bfbb      	ittet	lt
 800424c:	425b      	neglt	r3, r3
 800424e:	f042 0202 	orrlt.w	r2, r2, #2
 8004252:	9307      	strge	r3, [sp, #28]
 8004254:	9307      	strlt	r3, [sp, #28]
 8004256:	bfb8      	it	lt
 8004258:	9204      	strlt	r2, [sp, #16]
 800425a:	7823      	ldrb	r3, [r4, #0]
 800425c:	2b2e      	cmp	r3, #46	; 0x2e
 800425e:	d10c      	bne.n	800427a <_vfiprintf_r+0x176>
 8004260:	7863      	ldrb	r3, [r4, #1]
 8004262:	2b2a      	cmp	r3, #42	; 0x2a
 8004264:	d135      	bne.n	80042d2 <_vfiprintf_r+0x1ce>
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	3402      	adds	r4, #2
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	9203      	str	r2, [sp, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfb8      	it	lt
 8004274:	f04f 33ff 	movlt.w	r3, #4294967295
 8004278:	9305      	str	r3, [sp, #20]
 800427a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004360 <_vfiprintf_r+0x25c>
 800427e:	2203      	movs	r2, #3
 8004280:	4650      	mov	r0, sl
 8004282:	7821      	ldrb	r1, [r4, #0]
 8004284:	f000 fcea 	bl	8004c5c <memchr>
 8004288:	b140      	cbz	r0, 800429c <_vfiprintf_r+0x198>
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	eba0 000a 	sub.w	r0, r0, sl
 8004290:	fa03 f000 	lsl.w	r0, r3, r0
 8004294:	9b04      	ldr	r3, [sp, #16]
 8004296:	3401      	adds	r4, #1
 8004298:	4303      	orrs	r3, r0
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	2206      	movs	r2, #6
 80042a2:	482c      	ldr	r0, [pc, #176]	; (8004354 <_vfiprintf_r+0x250>)
 80042a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042a8:	f000 fcd8 	bl	8004c5c <memchr>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d03f      	beq.n	8004330 <_vfiprintf_r+0x22c>
 80042b0:	4b29      	ldr	r3, [pc, #164]	; (8004358 <_vfiprintf_r+0x254>)
 80042b2:	bb1b      	cbnz	r3, 80042fc <_vfiprintf_r+0x1f8>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	3307      	adds	r3, #7
 80042b8:	f023 0307 	bic.w	r3, r3, #7
 80042bc:	3308      	adds	r3, #8
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c2:	443b      	add	r3, r7
 80042c4:	9309      	str	r3, [sp, #36]	; 0x24
 80042c6:	e767      	b.n	8004198 <_vfiprintf_r+0x94>
 80042c8:	460c      	mov	r4, r1
 80042ca:	2001      	movs	r0, #1
 80042cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80042d0:	e7a5      	b.n	800421e <_vfiprintf_r+0x11a>
 80042d2:	2300      	movs	r3, #0
 80042d4:	f04f 0c0a 	mov.w	ip, #10
 80042d8:	4619      	mov	r1, r3
 80042da:	3401      	adds	r4, #1
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	4620      	mov	r0, r4
 80042e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042e4:	3a30      	subs	r2, #48	; 0x30
 80042e6:	2a09      	cmp	r2, #9
 80042e8:	d903      	bls.n	80042f2 <_vfiprintf_r+0x1ee>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0c5      	beq.n	800427a <_vfiprintf_r+0x176>
 80042ee:	9105      	str	r1, [sp, #20]
 80042f0:	e7c3      	b.n	800427a <_vfiprintf_r+0x176>
 80042f2:	4604      	mov	r4, r0
 80042f4:	2301      	movs	r3, #1
 80042f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042fa:	e7f0      	b.n	80042de <_vfiprintf_r+0x1da>
 80042fc:	ab03      	add	r3, sp, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	462a      	mov	r2, r5
 8004302:	4630      	mov	r0, r6
 8004304:	4b15      	ldr	r3, [pc, #84]	; (800435c <_vfiprintf_r+0x258>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	f3af 8000 	nop.w
 800430c:	4607      	mov	r7, r0
 800430e:	1c78      	adds	r0, r7, #1
 8004310:	d1d6      	bne.n	80042c0 <_vfiprintf_r+0x1bc>
 8004312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004314:	07d9      	lsls	r1, r3, #31
 8004316:	d405      	bmi.n	8004324 <_vfiprintf_r+0x220>
 8004318:	89ab      	ldrh	r3, [r5, #12]
 800431a:	059a      	lsls	r2, r3, #22
 800431c:	d402      	bmi.n	8004324 <_vfiprintf_r+0x220>
 800431e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004320:	f000 fc37 	bl	8004b92 <__retarget_lock_release_recursive>
 8004324:	89ab      	ldrh	r3, [r5, #12]
 8004326:	065b      	lsls	r3, r3, #25
 8004328:	f53f af12 	bmi.w	8004150 <_vfiprintf_r+0x4c>
 800432c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800432e:	e711      	b.n	8004154 <_vfiprintf_r+0x50>
 8004330:	ab03      	add	r3, sp, #12
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	462a      	mov	r2, r5
 8004336:	4630      	mov	r0, r6
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <_vfiprintf_r+0x258>)
 800433a:	a904      	add	r1, sp, #16
 800433c:	f000 f882 	bl	8004444 <_printf_i>
 8004340:	e7e4      	b.n	800430c <_vfiprintf_r+0x208>
 8004342:	bf00      	nop
 8004344:	0800540c 	.word	0x0800540c
 8004348:	0800542c 	.word	0x0800542c
 800434c:	080053ec 	.word	0x080053ec
 8004350:	080053b8 	.word	0x080053b8
 8004354:	080053c2 	.word	0x080053c2
 8004358:	00000000 	.word	0x00000000
 800435c:	080040df 	.word	0x080040df
 8004360:	080053be 	.word	0x080053be

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4616      	mov	r6, r2
 800436a:	4699      	mov	r9, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4607      	mov	r7, r0
 8004372:	4293      	cmp	r3, r2
 8004374:	bfb8      	it	lt
 8004376:	4613      	movlt	r3, r2
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800437e:	460c      	mov	r4, r1
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	b10a      	cbz	r2, 800438a <_printf_common+0x26>
 8004386:	3301      	adds	r3, #1
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	0699      	lsls	r1, r3, #26
 800438e:	bf42      	ittt	mi
 8004390:	6833      	ldrmi	r3, [r6, #0]
 8004392:	3302      	addmi	r3, #2
 8004394:	6033      	strmi	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d106      	bne.n	80043ac <_printf_common+0x48>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	dc28      	bgt.n	80043fe <_printf_common+0x9a>
 80043ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b0:	1e13      	subs	r3, r2, #0
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	0692      	lsls	r2, r2, #26
 80043ba:	d42d      	bmi.n	8004418 <_printf_common+0xb4>
 80043bc:	4649      	mov	r1, r9
 80043be:	4638      	mov	r0, r7
 80043c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c4:	47c0      	blx	r8
 80043c6:	3001      	adds	r0, #1
 80043c8:	d020      	beq.n	800440c <_printf_common+0xa8>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	68e5      	ldr	r5, [r4, #12]
 80043ce:	f003 0306 	and.w	r3, r3, #6
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	bf18      	it	ne
 80043d6:	2500      	movne	r5, #0
 80043d8:	6832      	ldr	r2, [r6, #0]
 80043da:	f04f 0600 	mov.w	r6, #0
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	bf08      	it	eq
 80043e2:	1aad      	subeq	r5, r5, r2
 80043e4:	6922      	ldr	r2, [r4, #16]
 80043e6:	bf08      	it	eq
 80043e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bfc4      	itt	gt
 80043f0:	1a9b      	subgt	r3, r3, r2
 80043f2:	18ed      	addgt	r5, r5, r3
 80043f4:	341a      	adds	r4, #26
 80043f6:	42b5      	cmp	r5, r6
 80043f8:	d11a      	bne.n	8004430 <_printf_common+0xcc>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e008      	b.n	8004410 <_printf_common+0xac>
 80043fe:	2301      	movs	r3, #1
 8004400:	4652      	mov	r2, sl
 8004402:	4649      	mov	r1, r9
 8004404:	4638      	mov	r0, r7
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d103      	bne.n	8004414 <_printf_common+0xb0>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	3501      	adds	r5, #1
 8004416:	e7c4      	b.n	80043a2 <_printf_common+0x3e>
 8004418:	2030      	movs	r0, #48	; 0x30
 800441a:	18e1      	adds	r1, r4, r3
 800441c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004426:	4422      	add	r2, r4
 8004428:	3302      	adds	r3, #2
 800442a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442e:	e7c5      	b.n	80043bc <_printf_common+0x58>
 8004430:	2301      	movs	r3, #1
 8004432:	4622      	mov	r2, r4
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d0e6      	beq.n	800440c <_printf_common+0xa8>
 800443e:	3601      	adds	r6, #1
 8004440:	e7d9      	b.n	80043f6 <_printf_common+0x92>
	...

08004444 <_printf_i>:
 8004444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	460c      	mov	r4, r1
 800444a:	7e27      	ldrb	r7, [r4, #24]
 800444c:	4691      	mov	r9, r2
 800444e:	2f78      	cmp	r7, #120	; 0x78
 8004450:	4680      	mov	r8, r0
 8004452:	469a      	mov	sl, r3
 8004454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800445a:	d807      	bhi.n	800446c <_printf_i+0x28>
 800445c:	2f62      	cmp	r7, #98	; 0x62
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x32>
 8004460:	2f00      	cmp	r7, #0
 8004462:	f000 80d9 	beq.w	8004618 <_printf_i+0x1d4>
 8004466:	2f58      	cmp	r7, #88	; 0x58
 8004468:	f000 80a4 	beq.w	80045b4 <_printf_i+0x170>
 800446c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004474:	e03a      	b.n	80044ec <_printf_i+0xa8>
 8004476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800447a:	2b15      	cmp	r3, #21
 800447c:	d8f6      	bhi.n	800446c <_printf_i+0x28>
 800447e:	a001      	add	r0, pc, #4	; (adr r0, 8004484 <_printf_i+0x40>)
 8004480:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044f1 	.word	0x080044f1
 800448c:	0800446d 	.word	0x0800446d
 8004490:	0800446d 	.word	0x0800446d
 8004494:	0800446d 	.word	0x0800446d
 8004498:	0800446d 	.word	0x0800446d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800446d 	.word	0x0800446d
 80044a4:	0800446d 	.word	0x0800446d
 80044a8:	0800446d 	.word	0x0800446d
 80044ac:	0800446d 	.word	0x0800446d
 80044b0:	080045ff 	.word	0x080045ff
 80044b4:	08004521 	.word	0x08004521
 80044b8:	080045e1 	.word	0x080045e1
 80044bc:	0800446d 	.word	0x0800446d
 80044c0:	0800446d 	.word	0x0800446d
 80044c4:	08004621 	.word	0x08004621
 80044c8:	0800446d 	.word	0x0800446d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800446d 	.word	0x0800446d
 80044d4:	0800446d 	.word	0x0800446d
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	680b      	ldr	r3, [r1, #0]
 80044de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	600a      	str	r2, [r1, #0]
 80044e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0a4      	b.n	800463a <_printf_i+0x1f6>
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	6808      	ldr	r0, [r1, #0]
 80044f4:	062e      	lsls	r6, r5, #24
 80044f6:	f100 0304 	add.w	r3, r0, #4
 80044fa:	d50a      	bpl.n	8004512 <_printf_i+0xce>
 80044fc:	6805      	ldr	r5, [r0, #0]
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	2d00      	cmp	r5, #0
 8004502:	da03      	bge.n	800450c <_printf_i+0xc8>
 8004504:	232d      	movs	r3, #45	; 0x2d
 8004506:	426d      	negs	r5, r5
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	230a      	movs	r3, #10
 800450e:	485e      	ldr	r0, [pc, #376]	; (8004688 <_printf_i+0x244>)
 8004510:	e019      	b.n	8004546 <_printf_i+0x102>
 8004512:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004516:	6805      	ldr	r5, [r0, #0]
 8004518:	600b      	str	r3, [r1, #0]
 800451a:	bf18      	it	ne
 800451c:	b22d      	sxthne	r5, r5
 800451e:	e7ef      	b.n	8004500 <_printf_i+0xbc>
 8004520:	680b      	ldr	r3, [r1, #0]
 8004522:	6825      	ldr	r5, [r4, #0]
 8004524:	1d18      	adds	r0, r3, #4
 8004526:	6008      	str	r0, [r1, #0]
 8004528:	0628      	lsls	r0, r5, #24
 800452a:	d501      	bpl.n	8004530 <_printf_i+0xec>
 800452c:	681d      	ldr	r5, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0xf2>
 8004530:	0669      	lsls	r1, r5, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0xe8>
 8004534:	881d      	ldrh	r5, [r3, #0]
 8004536:	2f6f      	cmp	r7, #111	; 0x6f
 8004538:	bf0c      	ite	eq
 800453a:	2308      	moveq	r3, #8
 800453c:	230a      	movne	r3, #10
 800453e:	4852      	ldr	r0, [pc, #328]	; (8004688 <_printf_i+0x244>)
 8004540:	2100      	movs	r1, #0
 8004542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004546:	6866      	ldr	r6, [r4, #4]
 8004548:	2e00      	cmp	r6, #0
 800454a:	bfa8      	it	ge
 800454c:	6821      	ldrge	r1, [r4, #0]
 800454e:	60a6      	str	r6, [r4, #8]
 8004550:	bfa4      	itt	ge
 8004552:	f021 0104 	bicge.w	r1, r1, #4
 8004556:	6021      	strge	r1, [r4, #0]
 8004558:	b90d      	cbnz	r5, 800455e <_printf_i+0x11a>
 800455a:	2e00      	cmp	r6, #0
 800455c:	d04d      	beq.n	80045fa <_printf_i+0x1b6>
 800455e:	4616      	mov	r6, r2
 8004560:	fbb5 f1f3 	udiv	r1, r5, r3
 8004564:	fb03 5711 	mls	r7, r3, r1, r5
 8004568:	5dc7      	ldrb	r7, [r0, r7]
 800456a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800456e:	462f      	mov	r7, r5
 8004570:	42bb      	cmp	r3, r7
 8004572:	460d      	mov	r5, r1
 8004574:	d9f4      	bls.n	8004560 <_printf_i+0x11c>
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10b      	bne.n	8004592 <_printf_i+0x14e>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	07df      	lsls	r7, r3, #31
 800457e:	d508      	bpl.n	8004592 <_printf_i+0x14e>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	6861      	ldr	r1, [r4, #4]
 8004584:	4299      	cmp	r1, r3
 8004586:	bfde      	ittt	le
 8004588:	2330      	movle	r3, #48	; 0x30
 800458a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800458e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004592:	1b92      	subs	r2, r2, r6
 8004594:	6122      	str	r2, [r4, #16]
 8004596:	464b      	mov	r3, r9
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f8cd a000 	str.w	sl, [sp]
 80045a0:	aa03      	add	r2, sp, #12
 80045a2:	f7ff fedf 	bl	8004364 <_printf_common>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d14c      	bne.n	8004644 <_printf_i+0x200>
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	b004      	add	sp, #16
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	4834      	ldr	r0, [pc, #208]	; (8004688 <_printf_i+0x244>)
 80045b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ba:	680e      	ldr	r6, [r1, #0]
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f856 5b04 	ldr.w	r5, [r6], #4
 80045c2:	061f      	lsls	r7, r3, #24
 80045c4:	600e      	str	r6, [r1, #0]
 80045c6:	d514      	bpl.n	80045f2 <_printf_i+0x1ae>
 80045c8:	07d9      	lsls	r1, r3, #31
 80045ca:	bf44      	itt	mi
 80045cc:	f043 0320 	orrmi.w	r3, r3, #32
 80045d0:	6023      	strmi	r3, [r4, #0]
 80045d2:	b91d      	cbnz	r5, 80045dc <_printf_i+0x198>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	2310      	movs	r3, #16
 80045de:	e7af      	b.n	8004540 <_printf_i+0xfc>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	f043 0320 	orr.w	r3, r3, #32
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	2378      	movs	r3, #120	; 0x78
 80045ea:	4828      	ldr	r0, [pc, #160]	; (800468c <_printf_i+0x248>)
 80045ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045f0:	e7e3      	b.n	80045ba <_printf_i+0x176>
 80045f2:	065e      	lsls	r6, r3, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	e7e6      	b.n	80045c8 <_printf_i+0x184>
 80045fa:	4616      	mov	r6, r2
 80045fc:	e7bb      	b.n	8004576 <_printf_i+0x132>
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	6826      	ldr	r6, [r4, #0]
 8004602:	1d1d      	adds	r5, r3, #4
 8004604:	6960      	ldr	r0, [r4, #20]
 8004606:	600d      	str	r5, [r1, #0]
 8004608:	0635      	lsls	r5, r6, #24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	d501      	bpl.n	8004612 <_printf_i+0x1ce>
 800460e:	6018      	str	r0, [r3, #0]
 8004610:	e002      	b.n	8004618 <_printf_i+0x1d4>
 8004612:	0671      	lsls	r1, r6, #25
 8004614:	d5fb      	bpl.n	800460e <_printf_i+0x1ca>
 8004616:	8018      	strh	r0, [r3, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	4616      	mov	r6, r2
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	e7ba      	b.n	8004596 <_printf_i+0x152>
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	600a      	str	r2, [r1, #0]
 8004626:	681e      	ldr	r6, [r3, #0]
 8004628:	2100      	movs	r1, #0
 800462a:	4630      	mov	r0, r6
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	f000 fb15 	bl	8004c5c <memchr>
 8004632:	b108      	cbz	r0, 8004638 <_printf_i+0x1f4>
 8004634:	1b80      	subs	r0, r0, r6
 8004636:	6060      	str	r0, [r4, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	2300      	movs	r3, #0
 800463e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004642:	e7a8      	b.n	8004596 <_printf_i+0x152>
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	47d0      	blx	sl
 800464e:	3001      	adds	r0, #1
 8004650:	d0ab      	beq.n	80045aa <_printf_i+0x166>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	079b      	lsls	r3, r3, #30
 8004656:	d413      	bmi.n	8004680 <_printf_i+0x23c>
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	4298      	cmp	r0, r3
 800465e:	bfb8      	it	lt
 8004660:	4618      	movlt	r0, r3
 8004662:	e7a4      	b.n	80045ae <_printf_i+0x16a>
 8004664:	2301      	movs	r3, #1
 8004666:	4632      	mov	r2, r6
 8004668:	4649      	mov	r1, r9
 800466a:	4640      	mov	r0, r8
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d09b      	beq.n	80045aa <_printf_i+0x166>
 8004672:	3501      	adds	r5, #1
 8004674:	68e3      	ldr	r3, [r4, #12]
 8004676:	9903      	ldr	r1, [sp, #12]
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	42ab      	cmp	r3, r5
 800467c:	dcf2      	bgt.n	8004664 <_printf_i+0x220>
 800467e:	e7eb      	b.n	8004658 <_printf_i+0x214>
 8004680:	2500      	movs	r5, #0
 8004682:	f104 0619 	add.w	r6, r4, #25
 8004686:	e7f5      	b.n	8004674 <_printf_i+0x230>
 8004688:	080053c9 	.word	0x080053c9
 800468c:	080053da 	.word	0x080053da

08004690 <__swbuf_r>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	460e      	mov	r6, r1
 8004694:	4614      	mov	r4, r2
 8004696:	4605      	mov	r5, r0
 8004698:	b118      	cbz	r0, 80046a2 <__swbuf_r+0x12>
 800469a:	6983      	ldr	r3, [r0, #24]
 800469c:	b90b      	cbnz	r3, 80046a2 <__swbuf_r+0x12>
 800469e:	f000 f9d9 	bl	8004a54 <__sinit>
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <__swbuf_r+0x98>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d12b      	bne.n	8004700 <__swbuf_r+0x70>
 80046a8:	686c      	ldr	r4, [r5, #4]
 80046aa:	69a3      	ldr	r3, [r4, #24]
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	071a      	lsls	r2, r3, #28
 80046b2:	d52f      	bpl.n	8004714 <__swbuf_r+0x84>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b36b      	cbz	r3, 8004714 <__swbuf_r+0x84>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	b2f6      	uxtb	r6, r6
 80046be:	1ac0      	subs	r0, r0, r3
 80046c0:	6963      	ldr	r3, [r4, #20]
 80046c2:	4637      	mov	r7, r6
 80046c4:	4283      	cmp	r3, r0
 80046c6:	dc04      	bgt.n	80046d2 <__swbuf_r+0x42>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f92e 	bl	800492c <_fflush_r>
 80046d0:	bb30      	cbnz	r0, 8004720 <__swbuf_r+0x90>
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	3001      	adds	r0, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	701e      	strb	r6, [r3, #0]
 80046e2:	6963      	ldr	r3, [r4, #20]
 80046e4:	4283      	cmp	r3, r0
 80046e6:	d004      	beq.n	80046f2 <__swbuf_r+0x62>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	07db      	lsls	r3, r3, #31
 80046ec:	d506      	bpl.n	80046fc <__swbuf_r+0x6c>
 80046ee:	2e0a      	cmp	r6, #10
 80046f0:	d104      	bne.n	80046fc <__swbuf_r+0x6c>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 f919 	bl	800492c <_fflush_r>
 80046fa:	b988      	cbnz	r0, 8004720 <__swbuf_r+0x90>
 80046fc:	4638      	mov	r0, r7
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <__swbuf_r+0x9c>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swbuf_r+0x7a>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7cf      	b.n	80046aa <__swbuf_r+0x1a>
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <__swbuf_r+0xa0>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7ca      	b.n	80046aa <__swbuf_r+0x1a>
 8004714:	4621      	mov	r1, r4
 8004716:	4628      	mov	r0, r5
 8004718:	f000 f80c 	bl	8004734 <__swsetup_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	d0cb      	beq.n	80046b8 <__swbuf_r+0x28>
 8004720:	f04f 37ff 	mov.w	r7, #4294967295
 8004724:	e7ea      	b.n	80046fc <__swbuf_r+0x6c>
 8004726:	bf00      	nop
 8004728:	0800540c 	.word	0x0800540c
 800472c:	0800542c 	.word	0x0800542c
 8004730:	080053ec 	.word	0x080053ec

08004734 <__swsetup_r>:
 8004734:	4b32      	ldr	r3, [pc, #200]	; (8004800 <__swsetup_r+0xcc>)
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	b125      	cbz	r5, 800474a <__swsetup_r+0x16>
 8004740:	69ab      	ldr	r3, [r5, #24]
 8004742:	b913      	cbnz	r3, 800474a <__swsetup_r+0x16>
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f985 	bl	8004a54 <__sinit>
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <__swsetup_r+0xd0>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d10f      	bne.n	8004770 <__swsetup_r+0x3c>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004758:	0719      	lsls	r1, r3, #28
 800475a:	d42c      	bmi.n	80047b6 <__swsetup_r+0x82>
 800475c:	06dd      	lsls	r5, r3, #27
 800475e:	d411      	bmi.n	8004784 <__swsetup_r+0x50>
 8004760:	2309      	movs	r3, #9
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	e03e      	b.n	80047ee <__swsetup_r+0xba>
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <__swsetup_r+0xd4>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swsetup_r+0x46>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7eb      	b.n	8004752 <__swsetup_r+0x1e>
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <__swsetup_r+0xd8>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7e6      	b.n	8004752 <__swsetup_r+0x1e>
 8004784:	0758      	lsls	r0, r3, #29
 8004786:	d512      	bpl.n	80047ae <__swsetup_r+0x7a>
 8004788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800478a:	b141      	cbz	r1, 800479e <__swsetup_r+0x6a>
 800478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__swsetup_r+0x66>
 8004794:	4630      	mov	r0, r6
 8004796:	f000 fa6f 	bl	8004c78 <_free_r>
 800479a:	2300      	movs	r3, #0
 800479c:	6363      	str	r3, [r4, #52]	; 0x34
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	b94b      	cbnz	r3, 80047ce <__swsetup_r+0x9a>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d003      	beq.n	80047ce <__swsetup_r+0x9a>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 fa07 	bl	8004bdc <__smakebuf_r>
 80047ce:	89a0      	ldrh	r0, [r4, #12]
 80047d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047d4:	f010 0301 	ands.w	r3, r0, #1
 80047d8:	d00a      	beq.n	80047f0 <__swsetup_r+0xbc>
 80047da:	2300      	movs	r3, #0
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	6963      	ldr	r3, [r4, #20]
 80047e0:	425b      	negs	r3, r3
 80047e2:	61a3      	str	r3, [r4, #24]
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b943      	cbnz	r3, 80047fa <__swsetup_r+0xc6>
 80047e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047ec:	d1ba      	bne.n	8004764 <__swsetup_r+0x30>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	0781      	lsls	r1, r0, #30
 80047f2:	bf58      	it	pl
 80047f4:	6963      	ldrpl	r3, [r4, #20]
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	e7f4      	b.n	80047e4 <__swsetup_r+0xb0>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e7f7      	b.n	80047ee <__swsetup_r+0xba>
 80047fe:	bf00      	nop
 8004800:	20000090 	.word	0x20000090
 8004804:	0800540c 	.word	0x0800540c
 8004808:	0800542c 	.word	0x0800542c
 800480c:	080053ec 	.word	0x080053ec

08004810 <abort>:
 8004810:	2006      	movs	r0, #6
 8004812:	b508      	push	{r3, lr}
 8004814:	f000 fb0e 	bl	8004e34 <raise>
 8004818:	2001      	movs	r0, #1
 800481a:	f7fb ff60 	bl	80006de <_exit>
	...

08004820 <__sflush_r>:
 8004820:	898a      	ldrh	r2, [r1, #12]
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	4605      	mov	r5, r0
 8004828:	0710      	lsls	r0, r2, #28
 800482a:	460c      	mov	r4, r1
 800482c:	d458      	bmi.n	80048e0 <__sflush_r+0xc0>
 800482e:	684b      	ldr	r3, [r1, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	dc05      	bgt.n	8004840 <__sflush_r+0x20>
 8004834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	dc02      	bgt.n	8004840 <__sflush_r+0x20>
 800483a:	2000      	movs	r0, #0
 800483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004842:	2e00      	cmp	r6, #0
 8004844:	d0f9      	beq.n	800483a <__sflush_r+0x1a>
 8004846:	2300      	movs	r3, #0
 8004848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800484c:	682f      	ldr	r7, [r5, #0]
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	d032      	beq.n	80048b8 <__sflush_r+0x98>
 8004852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	075a      	lsls	r2, r3, #29
 8004858:	d505      	bpl.n	8004866 <__sflush_r+0x46>
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	1ac0      	subs	r0, r0, r3
 800485e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004860:	b10b      	cbz	r3, 8004866 <__sflush_r+0x46>
 8004862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004864:	1ac0      	subs	r0, r0, r3
 8004866:	2300      	movs	r3, #0
 8004868:	4602      	mov	r2, r0
 800486a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486c:	4628      	mov	r0, r5
 800486e:	6a21      	ldr	r1, [r4, #32]
 8004870:	47b0      	blx	r6
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	d106      	bne.n	8004886 <__sflush_r+0x66>
 8004878:	6829      	ldr	r1, [r5, #0]
 800487a:	291d      	cmp	r1, #29
 800487c:	d82c      	bhi.n	80048d8 <__sflush_r+0xb8>
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <__sflush_r+0x108>)
 8004880:	40ca      	lsrs	r2, r1
 8004882:	07d6      	lsls	r6, r2, #31
 8004884:	d528      	bpl.n	80048d8 <__sflush_r+0xb8>
 8004886:	2200      	movs	r2, #0
 8004888:	6062      	str	r2, [r4, #4]
 800488a:	6922      	ldr	r2, [r4, #16]
 800488c:	04d9      	lsls	r1, r3, #19
 800488e:	6022      	str	r2, [r4, #0]
 8004890:	d504      	bpl.n	800489c <__sflush_r+0x7c>
 8004892:	1c42      	adds	r2, r0, #1
 8004894:	d101      	bne.n	800489a <__sflush_r+0x7a>
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	b903      	cbnz	r3, 800489c <__sflush_r+0x7c>
 800489a:	6560      	str	r0, [r4, #84]	; 0x54
 800489c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800489e:	602f      	str	r7, [r5, #0]
 80048a0:	2900      	cmp	r1, #0
 80048a2:	d0ca      	beq.n	800483a <__sflush_r+0x1a>
 80048a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048a8:	4299      	cmp	r1, r3
 80048aa:	d002      	beq.n	80048b2 <__sflush_r+0x92>
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f9e3 	bl	8004c78 <_free_r>
 80048b2:	2000      	movs	r0, #0
 80048b4:	6360      	str	r0, [r4, #52]	; 0x34
 80048b6:	e7c1      	b.n	800483c <__sflush_r+0x1c>
 80048b8:	6a21      	ldr	r1, [r4, #32]
 80048ba:	2301      	movs	r3, #1
 80048bc:	4628      	mov	r0, r5
 80048be:	47b0      	blx	r6
 80048c0:	1c41      	adds	r1, r0, #1
 80048c2:	d1c7      	bne.n	8004854 <__sflush_r+0x34>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0c4      	beq.n	8004854 <__sflush_r+0x34>
 80048ca:	2b1d      	cmp	r3, #29
 80048cc:	d001      	beq.n	80048d2 <__sflush_r+0xb2>
 80048ce:	2b16      	cmp	r3, #22
 80048d0:	d101      	bne.n	80048d6 <__sflush_r+0xb6>
 80048d2:	602f      	str	r7, [r5, #0]
 80048d4:	e7b1      	b.n	800483a <__sflush_r+0x1a>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	e7ad      	b.n	800483c <__sflush_r+0x1c>
 80048e0:	690f      	ldr	r7, [r1, #16]
 80048e2:	2f00      	cmp	r7, #0
 80048e4:	d0a9      	beq.n	800483a <__sflush_r+0x1a>
 80048e6:	0793      	lsls	r3, r2, #30
 80048e8:	bf18      	it	ne
 80048ea:	2300      	movne	r3, #0
 80048ec:	680e      	ldr	r6, [r1, #0]
 80048ee:	bf08      	it	eq
 80048f0:	694b      	ldreq	r3, [r1, #20]
 80048f2:	eba6 0807 	sub.w	r8, r6, r7
 80048f6:	600f      	str	r7, [r1, #0]
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	f1b8 0f00 	cmp.w	r8, #0
 80048fe:	dd9c      	ble.n	800483a <__sflush_r+0x1a>
 8004900:	4643      	mov	r3, r8
 8004902:	463a      	mov	r2, r7
 8004904:	4628      	mov	r0, r5
 8004906:	6a21      	ldr	r1, [r4, #32]
 8004908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800490a:	47b0      	blx	r6
 800490c:	2800      	cmp	r0, #0
 800490e:	dc06      	bgt.n	800491e <__sflush_r+0xfe>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f04f 30ff 	mov.w	r0, #4294967295
 8004916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	e78e      	b.n	800483c <__sflush_r+0x1c>
 800491e:	4407      	add	r7, r0
 8004920:	eba8 0800 	sub.w	r8, r8, r0
 8004924:	e7e9      	b.n	80048fa <__sflush_r+0xda>
 8004926:	bf00      	nop
 8004928:	20400001 	.word	0x20400001

0800492c <_fflush_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	690b      	ldr	r3, [r1, #16]
 8004930:	4605      	mov	r5, r0
 8004932:	460c      	mov	r4, r1
 8004934:	b913      	cbnz	r3, 800493c <_fflush_r+0x10>
 8004936:	2500      	movs	r5, #0
 8004938:	4628      	mov	r0, r5
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	b118      	cbz	r0, 8004946 <_fflush_r+0x1a>
 800493e:	6983      	ldr	r3, [r0, #24]
 8004940:	b90b      	cbnz	r3, 8004946 <_fflush_r+0x1a>
 8004942:	f000 f887 	bl	8004a54 <__sinit>
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <_fflush_r+0x6c>)
 8004948:	429c      	cmp	r4, r3
 800494a:	d11b      	bne.n	8004984 <_fflush_r+0x58>
 800494c:	686c      	ldr	r4, [r5, #4]
 800494e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ef      	beq.n	8004936 <_fflush_r+0xa>
 8004956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004958:	07d0      	lsls	r0, r2, #31
 800495a:	d404      	bmi.n	8004966 <_fflush_r+0x3a>
 800495c:	0599      	lsls	r1, r3, #22
 800495e:	d402      	bmi.n	8004966 <_fflush_r+0x3a>
 8004960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004962:	f000 f915 	bl	8004b90 <__retarget_lock_acquire_recursive>
 8004966:	4628      	mov	r0, r5
 8004968:	4621      	mov	r1, r4
 800496a:	f7ff ff59 	bl	8004820 <__sflush_r>
 800496e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004970:	4605      	mov	r5, r0
 8004972:	07da      	lsls	r2, r3, #31
 8004974:	d4e0      	bmi.n	8004938 <_fflush_r+0xc>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	059b      	lsls	r3, r3, #22
 800497a:	d4dd      	bmi.n	8004938 <_fflush_r+0xc>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f000 f908 	bl	8004b92 <__retarget_lock_release_recursive>
 8004982:	e7d9      	b.n	8004938 <_fflush_r+0xc>
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <_fflush_r+0x70>)
 8004986:	429c      	cmp	r4, r3
 8004988:	d101      	bne.n	800498e <_fflush_r+0x62>
 800498a:	68ac      	ldr	r4, [r5, #8]
 800498c:	e7df      	b.n	800494e <_fflush_r+0x22>
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <_fflush_r+0x74>)
 8004990:	429c      	cmp	r4, r3
 8004992:	bf08      	it	eq
 8004994:	68ec      	ldreq	r4, [r5, #12]
 8004996:	e7da      	b.n	800494e <_fflush_r+0x22>
 8004998:	0800540c 	.word	0x0800540c
 800499c:	0800542c 	.word	0x0800542c
 80049a0:	080053ec 	.word	0x080053ec

080049a4 <std>:
 80049a4:	2300      	movs	r3, #0
 80049a6:	b510      	push	{r4, lr}
 80049a8:	4604      	mov	r4, r0
 80049aa:	e9c0 3300 	strd	r3, r3, [r0]
 80049ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049b2:	6083      	str	r3, [r0, #8]
 80049b4:	8181      	strh	r1, [r0, #12]
 80049b6:	6643      	str	r3, [r0, #100]	; 0x64
 80049b8:	81c2      	strh	r2, [r0, #14]
 80049ba:	6183      	str	r3, [r0, #24]
 80049bc:	4619      	mov	r1, r3
 80049be:	2208      	movs	r2, #8
 80049c0:	305c      	adds	r0, #92	; 0x5c
 80049c2:	f7ff fb6f 	bl	80040a4 <memset>
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <std+0x38>)
 80049c8:	6224      	str	r4, [r4, #32]
 80049ca:	6263      	str	r3, [r4, #36]	; 0x24
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <std+0x3c>)
 80049ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <std+0x40>)
 80049d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <std+0x44>)
 80049d6:	6323      	str	r3, [r4, #48]	; 0x30
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	bf00      	nop
 80049dc:	08004e6d 	.word	0x08004e6d
 80049e0:	08004e8f 	.word	0x08004e8f
 80049e4:	08004ec7 	.word	0x08004ec7
 80049e8:	08004eeb 	.word	0x08004eeb

080049ec <_cleanup_r>:
 80049ec:	4901      	ldr	r1, [pc, #4]	; (80049f4 <_cleanup_r+0x8>)
 80049ee:	f000 b8af 	b.w	8004b50 <_fwalk_reent>
 80049f2:	bf00      	nop
 80049f4:	0800492d 	.word	0x0800492d

080049f8 <__sfmoreglue>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	2568      	movs	r5, #104	; 0x68
 80049fc:	1e4a      	subs	r2, r1, #1
 80049fe:	4355      	muls	r5, r2
 8004a00:	460e      	mov	r6, r1
 8004a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a06:	f000 f983 	bl	8004d10 <_malloc_r>
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	b140      	cbz	r0, 8004a20 <__sfmoreglue+0x28>
 8004a0e:	2100      	movs	r1, #0
 8004a10:	e9c0 1600 	strd	r1, r6, [r0]
 8004a14:	300c      	adds	r0, #12
 8004a16:	60a0      	str	r0, [r4, #8]
 8004a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a1c:	f7ff fb42 	bl	80040a4 <memset>
 8004a20:	4620      	mov	r0, r4
 8004a22:	bd70      	pop	{r4, r5, r6, pc}

08004a24 <__sfp_lock_acquire>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__sfp_lock_acquire+0x8>)
 8004a26:	f000 b8b3 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	200003b8 	.word	0x200003b8

08004a30 <__sfp_lock_release>:
 8004a30:	4801      	ldr	r0, [pc, #4]	; (8004a38 <__sfp_lock_release+0x8>)
 8004a32:	f000 b8ae 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004a36:	bf00      	nop
 8004a38:	200003b8 	.word	0x200003b8

08004a3c <__sinit_lock_acquire>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <__sinit_lock_acquire+0x8>)
 8004a3e:	f000 b8a7 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004a42:	bf00      	nop
 8004a44:	200003b3 	.word	0x200003b3

08004a48 <__sinit_lock_release>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__sinit_lock_release+0x8>)
 8004a4a:	f000 b8a2 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004a4e:	bf00      	nop
 8004a50:	200003b3 	.word	0x200003b3

08004a54 <__sinit>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4604      	mov	r4, r0
 8004a58:	f7ff fff0 	bl	8004a3c <__sinit_lock_acquire>
 8004a5c:	69a3      	ldr	r3, [r4, #24]
 8004a5e:	b11b      	cbz	r3, 8004a68 <__sinit+0x14>
 8004a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a64:	f7ff bff0 	b.w	8004a48 <__sinit_lock_release>
 8004a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <__sinit+0x68>)
 8004a70:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <__sinit+0x6c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	bf08      	it	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	bf08      	it	eq
 8004a80:	61a3      	streq	r3, [r4, #24]
 8004a82:	f000 f81f 	bl	8004ac4 <__sfp>
 8004a86:	6060      	str	r0, [r4, #4]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f81b 	bl	8004ac4 <__sfp>
 8004a8e:	60a0      	str	r0, [r4, #8]
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 f817 	bl	8004ac4 <__sfp>
 8004a96:	2200      	movs	r2, #0
 8004a98:	2104      	movs	r1, #4
 8004a9a:	60e0      	str	r0, [r4, #12]
 8004a9c:	6860      	ldr	r0, [r4, #4]
 8004a9e:	f7ff ff81 	bl	80049a4 <std>
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	2109      	movs	r1, #9
 8004aa6:	68a0      	ldr	r0, [r4, #8]
 8004aa8:	f7ff ff7c 	bl	80049a4 <std>
 8004aac:	2202      	movs	r2, #2
 8004aae:	2112      	movs	r1, #18
 8004ab0:	68e0      	ldr	r0, [r4, #12]
 8004ab2:	f7ff ff77 	bl	80049a4 <std>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61a3      	str	r3, [r4, #24]
 8004aba:	e7d1      	b.n	8004a60 <__sinit+0xc>
 8004abc:	080053b4 	.word	0x080053b4
 8004ac0:	080049ed 	.word	0x080049ed

08004ac4 <__sfp>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	f7ff ffac 	bl	8004a24 <__sfp_lock_acquire>
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <__sfp+0x84>)
 8004ace:	681e      	ldr	r6, [r3, #0]
 8004ad0:	69b3      	ldr	r3, [r6, #24]
 8004ad2:	b913      	cbnz	r3, 8004ada <__sfp+0x16>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f7ff ffbd 	bl	8004a54 <__sinit>
 8004ada:	3648      	adds	r6, #72	; 0x48
 8004adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	d503      	bpl.n	8004aec <__sfp+0x28>
 8004ae4:	6833      	ldr	r3, [r6, #0]
 8004ae6:	b30b      	cbz	r3, 8004b2c <__sfp+0x68>
 8004ae8:	6836      	ldr	r6, [r6, #0]
 8004aea:	e7f7      	b.n	8004adc <__sfp+0x18>
 8004aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004af0:	b9d5      	cbnz	r5, 8004b28 <__sfp+0x64>
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <__sfp+0x88>)
 8004af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004af8:	60e3      	str	r3, [r4, #12]
 8004afa:	6665      	str	r5, [r4, #100]	; 0x64
 8004afc:	f000 f847 	bl	8004b8e <__retarget_lock_init_recursive>
 8004b00:	f7ff ff96 	bl	8004a30 <__sfp_lock_release>
 8004b04:	2208      	movs	r2, #8
 8004b06:	4629      	mov	r1, r5
 8004b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b10:	6025      	str	r5, [r4, #0]
 8004b12:	61a5      	str	r5, [r4, #24]
 8004b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b18:	f7ff fac4 	bl	80040a4 <memset>
 8004b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b24:	4620      	mov	r0, r4
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b28:	3468      	adds	r4, #104	; 0x68
 8004b2a:	e7d9      	b.n	8004ae0 <__sfp+0x1c>
 8004b2c:	2104      	movs	r1, #4
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f7ff ff62 	bl	80049f8 <__sfmoreglue>
 8004b34:	4604      	mov	r4, r0
 8004b36:	6030      	str	r0, [r6, #0]
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1d5      	bne.n	8004ae8 <__sfp+0x24>
 8004b3c:	f7ff ff78 	bl	8004a30 <__sfp_lock_release>
 8004b40:	230c      	movs	r3, #12
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	e7ee      	b.n	8004b24 <__sfp+0x60>
 8004b46:	bf00      	nop
 8004b48:	080053b4 	.word	0x080053b4
 8004b4c:	ffff0001 	.word	0xffff0001

08004b50 <_fwalk_reent>:
 8004b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b54:	4606      	mov	r6, r0
 8004b56:	4688      	mov	r8, r1
 8004b58:	2700      	movs	r7, #0
 8004b5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b62:	f1b9 0901 	subs.w	r9, r9, #1
 8004b66:	d505      	bpl.n	8004b74 <_fwalk_reent+0x24>
 8004b68:	6824      	ldr	r4, [r4, #0]
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d1f7      	bne.n	8004b5e <_fwalk_reent+0xe>
 8004b6e:	4638      	mov	r0, r7
 8004b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b74:	89ab      	ldrh	r3, [r5, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d907      	bls.n	8004b8a <_fwalk_reent+0x3a>
 8004b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	d003      	beq.n	8004b8a <_fwalk_reent+0x3a>
 8004b82:	4629      	mov	r1, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	47c0      	blx	r8
 8004b88:	4307      	orrs	r7, r0
 8004b8a:	3568      	adds	r5, #104	; 0x68
 8004b8c:	e7e9      	b.n	8004b62 <_fwalk_reent+0x12>

08004b8e <__retarget_lock_init_recursive>:
 8004b8e:	4770      	bx	lr

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <__swhatbuf_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	460e      	mov	r6, r1
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	b096      	sub	sp, #88	; 0x58
 8004ba4:	da07      	bge.n	8004bb6 <__swhatbuf_r+0x22>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	89b3      	ldrh	r3, [r6, #12]
 8004bac:	061a      	lsls	r2, r3, #24
 8004bae:	d410      	bmi.n	8004bd2 <__swhatbuf_r+0x3e>
 8004bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb4:	e00e      	b.n	8004bd4 <__swhatbuf_r+0x40>
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	f000 f9be 	bl	8004f38 <_fstat_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dbf2      	blt.n	8004ba6 <__swhatbuf_r+0x12>
 8004bc0:	9a01      	ldr	r2, [sp, #4]
 8004bc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bca:	425a      	negs	r2, r3
 8004bcc:	415a      	adcs	r2, r3
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	e7ee      	b.n	8004bb0 <__swhatbuf_r+0x1c>
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	b016      	add	sp, #88	; 0x58
 8004bda:	bd70      	pop	{r4, r5, r6, pc}

08004bdc <__smakebuf_r>:
 8004bdc:	898b      	ldrh	r3, [r1, #12]
 8004bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004be0:	079d      	lsls	r5, r3, #30
 8004be2:	4606      	mov	r6, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	d507      	bpl.n	8004bf8 <__smakebuf_r+0x1c>
 8004be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	6163      	str	r3, [r4, #20]
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	466a      	mov	r2, sp
 8004bfa:	ab01      	add	r3, sp, #4
 8004bfc:	f7ff ffca 	bl	8004b94 <__swhatbuf_r>
 8004c00:	9900      	ldr	r1, [sp, #0]
 8004c02:	4605      	mov	r5, r0
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f883 	bl	8004d10 <_malloc_r>
 8004c0a:	b948      	cbnz	r0, 8004c20 <__smakebuf_r+0x44>
 8004c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c10:	059a      	lsls	r2, r3, #22
 8004c12:	d4ef      	bmi.n	8004bf4 <__smakebuf_r+0x18>
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	e7e3      	b.n	8004be8 <__smakebuf_r+0xc>
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <__smakebuf_r+0x7c>)
 8004c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	6020      	str	r0, [r4, #0]
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	6120      	str	r0, [r4, #16]
 8004c32:	6163      	str	r3, [r4, #20]
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	b15b      	cbz	r3, 8004c50 <__smakebuf_r+0x74>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c3e:	f000 f98d 	bl	8004f5c <_isatty_r>
 8004c42:	b128      	cbz	r0, 8004c50 <__smakebuf_r+0x74>
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	89a0      	ldrh	r0, [r4, #12]
 8004c52:	4305      	orrs	r5, r0
 8004c54:	81a5      	strh	r5, [r4, #12]
 8004c56:	e7cd      	b.n	8004bf4 <__smakebuf_r+0x18>
 8004c58:	080049ed 	.word	0x080049ed

08004c5c <memchr>:
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	b2c9      	uxtb	r1, r1
 8004c62:	4402      	add	r2, r0
 8004c64:	4293      	cmp	r3, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	d101      	bne.n	8004c6e <memchr+0x12>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e003      	b.n	8004c76 <memchr+0x1a>
 8004c6e:	7804      	ldrb	r4, [r0, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	428c      	cmp	r4, r1
 8004c74:	d1f6      	bne.n	8004c64 <memchr+0x8>
 8004c76:	bd10      	pop	{r4, pc}

08004c78 <_free_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d043      	beq.n	8004d08 <_free_r+0x90>
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f0c      	subs	r4, r1, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	18e4      	addlt	r4, r4, r3
 8004c8c:	f000 f988 	bl	8004fa0 <__malloc_lock>
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <_free_r+0x94>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	4610      	mov	r0, r2
 8004c96:	b933      	cbnz	r3, 8004ca6 <_free_r+0x2e>
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6014      	str	r4, [r2, #0]
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca2:	f000 b983 	b.w	8004fac <__malloc_unlock>
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	d90a      	bls.n	8004cc0 <_free_r+0x48>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	1862      	adds	r2, r4, r1
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bf01      	itttt	eq
 8004cb2:	681a      	ldreq	r2, [r3, #0]
 8004cb4:	685b      	ldreq	r3, [r3, #4]
 8004cb6:	1852      	addeq	r2, r2, r1
 8004cb8:	6022      	streq	r2, [r4, #0]
 8004cba:	6063      	str	r3, [r4, #4]
 8004cbc:	6004      	str	r4, [r0, #0]
 8004cbe:	e7ed      	b.n	8004c9c <_free_r+0x24>
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	b10b      	cbz	r3, 8004cca <_free_r+0x52>
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	d9fa      	bls.n	8004cc0 <_free_r+0x48>
 8004cca:	6811      	ldr	r1, [r2, #0]
 8004ccc:	1850      	adds	r0, r2, r1
 8004cce:	42a0      	cmp	r0, r4
 8004cd0:	d10b      	bne.n	8004cea <_free_r+0x72>
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	4401      	add	r1, r0
 8004cd6:	1850      	adds	r0, r2, r1
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	6011      	str	r1, [r2, #0]
 8004cdc:	d1de      	bne.n	8004c9c <_free_r+0x24>
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	6053      	str	r3, [r2, #4]
 8004ce8:	e7d8      	b.n	8004c9c <_free_r+0x24>
 8004cea:	d902      	bls.n	8004cf2 <_free_r+0x7a>
 8004cec:	230c      	movs	r3, #12
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	e7d4      	b.n	8004c9c <_free_r+0x24>
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1821      	adds	r1, r4, r0
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	bf01      	itttt	eq
 8004cfa:	6819      	ldreq	r1, [r3, #0]
 8004cfc:	685b      	ldreq	r3, [r3, #4]
 8004cfe:	1809      	addeq	r1, r1, r0
 8004d00:	6021      	streq	r1, [r4, #0]
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	6054      	str	r4, [r2, #4]
 8004d06:	e7c9      	b.n	8004c9c <_free_r+0x24>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200001bc 	.word	0x200001bc

08004d10 <_malloc_r>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	1ccd      	adds	r5, r1, #3
 8004d14:	f025 0503 	bic.w	r5, r5, #3
 8004d18:	3508      	adds	r5, #8
 8004d1a:	2d0c      	cmp	r5, #12
 8004d1c:	bf38      	it	cc
 8004d1e:	250c      	movcc	r5, #12
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	4606      	mov	r6, r0
 8004d24:	db01      	blt.n	8004d2a <_malloc_r+0x1a>
 8004d26:	42a9      	cmp	r1, r5
 8004d28:	d903      	bls.n	8004d32 <_malloc_r+0x22>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d32:	f000 f935 	bl	8004fa0 <__malloc_lock>
 8004d36:	4921      	ldr	r1, [pc, #132]	; (8004dbc <_malloc_r+0xac>)
 8004d38:	680a      	ldr	r2, [r1, #0]
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	b99c      	cbnz	r4, 8004d66 <_malloc_r+0x56>
 8004d3e:	4f20      	ldr	r7, [pc, #128]	; (8004dc0 <_malloc_r+0xb0>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b923      	cbnz	r3, 8004d4e <_malloc_r+0x3e>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 f83c 	bl	8004dc4 <_sbrk_r>
 8004d4c:	6038      	str	r0, [r7, #0]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f837 	bl	8004dc4 <_sbrk_r>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	d123      	bne.n	8004da2 <_malloc_r+0x92>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	f000 f924 	bl	8004fac <__malloc_unlock>
 8004d64:	e7e3      	b.n	8004d2e <_malloc_r+0x1e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	1b5b      	subs	r3, r3, r5
 8004d6a:	d417      	bmi.n	8004d9c <_malloc_r+0x8c>
 8004d6c:	2b0b      	cmp	r3, #11
 8004d6e:	d903      	bls.n	8004d78 <_malloc_r+0x68>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	441c      	add	r4, r3
 8004d74:	6025      	str	r5, [r4, #0]
 8004d76:	e004      	b.n	8004d82 <_malloc_r+0x72>
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	42a2      	cmp	r2, r4
 8004d7c:	bf0c      	ite	eq
 8004d7e:	600b      	streq	r3, [r1, #0]
 8004d80:	6053      	strne	r3, [r2, #4]
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f912 	bl	8004fac <__malloc_unlock>
 8004d88:	f104 000b 	add.w	r0, r4, #11
 8004d8c:	1d23      	adds	r3, r4, #4
 8004d8e:	f020 0007 	bic.w	r0, r0, #7
 8004d92:	1ac2      	subs	r2, r0, r3
 8004d94:	d0cc      	beq.n	8004d30 <_malloc_r+0x20>
 8004d96:	1a1b      	subs	r3, r3, r0
 8004d98:	50a3      	str	r3, [r4, r2]
 8004d9a:	e7c9      	b.n	8004d30 <_malloc_r+0x20>
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	6864      	ldr	r4, [r4, #4]
 8004da0:	e7cc      	b.n	8004d3c <_malloc_r+0x2c>
 8004da2:	1cc4      	adds	r4, r0, #3
 8004da4:	f024 0403 	bic.w	r4, r4, #3
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d0e3      	beq.n	8004d74 <_malloc_r+0x64>
 8004dac:	1a21      	subs	r1, r4, r0
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f808 	bl	8004dc4 <_sbrk_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d1dd      	bne.n	8004d74 <_malloc_r+0x64>
 8004db8:	e7cf      	b.n	8004d5a <_malloc_r+0x4a>
 8004dba:	bf00      	nop
 8004dbc:	200001bc 	.word	0x200001bc
 8004dc0:	200001c0 	.word	0x200001c0

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	; (8004de0 <_sbrk_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fb fcf8 	bl	80007c4 <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200003bc 	.word	0x200003bc

08004de4 <_raise_r>:
 8004de4:	291f      	cmp	r1, #31
 8004de6:	b538      	push	{r3, r4, r5, lr}
 8004de8:	4604      	mov	r4, r0
 8004dea:	460d      	mov	r5, r1
 8004dec:	d904      	bls.n	8004df8 <_raise_r+0x14>
 8004dee:	2316      	movs	r3, #22
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004dfa:	b112      	cbz	r2, 8004e02 <_raise_r+0x1e>
 8004dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e00:	b94b      	cbnz	r3, 8004e16 <_raise_r+0x32>
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 f830 	bl	8004e68 <_getpid_r>
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e12:	f000 b817 	b.w	8004e44 <_kill_r>
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d00a      	beq.n	8004e30 <_raise_r+0x4c>
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	d103      	bne.n	8004e26 <_raise_r+0x42>
 8004e1e:	2316      	movs	r3, #22
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	2001      	movs	r0, #1
 8004e24:	e7e7      	b.n	8004df6 <_raise_r+0x12>
 8004e26:	2400      	movs	r4, #0
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e2e:	4798      	blx	r3
 8004e30:	2000      	movs	r0, #0
 8004e32:	e7e0      	b.n	8004df6 <_raise_r+0x12>

08004e34 <raise>:
 8004e34:	4b02      	ldr	r3, [pc, #8]	; (8004e40 <raise+0xc>)
 8004e36:	4601      	mov	r1, r0
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	f7ff bfd3 	b.w	8004de4 <_raise_r>
 8004e3e:	bf00      	nop
 8004e40:	20000090 	.word	0x20000090

08004e44 <_kill_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	2300      	movs	r3, #0
 8004e48:	4d06      	ldr	r5, [pc, #24]	; (8004e64 <_kill_r+0x20>)
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	f7fb fc34 	bl	80006be <_kill>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d102      	bne.n	8004e60 <_kill_r+0x1c>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	b103      	cbz	r3, 8004e60 <_kill_r+0x1c>
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	200003bc 	.word	0x200003bc

08004e68 <_getpid_r>:
 8004e68:	f7fb bc22 	b.w	80006b0 <_getpid>

08004e6c <__sread>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	f000 f8a0 	bl	8004fb8 <_read_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	bfab      	itete	ge
 8004e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e80:	181b      	addge	r3, r3, r0
 8004e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e86:	bfac      	ite	ge
 8004e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e8a:	81a3      	strhlt	r3, [r4, #12]
 8004e8c:	bd10      	pop	{r4, pc}

08004e8e <__swrite>:
 8004e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e92:	461f      	mov	r7, r3
 8004e94:	898b      	ldrh	r3, [r1, #12]
 8004e96:	4605      	mov	r5, r0
 8004e98:	05db      	lsls	r3, r3, #23
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	d505      	bpl.n	8004eac <__swrite+0x1e>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	f000 f868 	bl	8004f7c <_lseek_r>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	4632      	mov	r2, r6
 8004eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	463b      	mov	r3, r7
 8004eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	f000 b817 	b.w	8004ef4 <_write_r>

08004ec6 <__sseek>:
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	460c      	mov	r4, r1
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 f855 	bl	8004f7c <_lseek_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	bf15      	itete	ne
 8004ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ee2:	81a3      	strheq	r3, [r4, #12]
 8004ee4:	bf18      	it	ne
 8004ee6:	81a3      	strhne	r3, [r4, #12]
 8004ee8:	bd10      	pop	{r4, pc}

08004eea <__sclose>:
 8004eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eee:	f000 b813 	b.w	8004f18 <_close_r>
	...

08004ef4 <_write_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	2200      	movs	r2, #0
 8004efe:	4d05      	ldr	r5, [pc, #20]	; (8004f14 <_write_r+0x20>)
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fb fc12 	bl	800072c <_write>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_write_r+0x1e>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_write_r+0x1e>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	200003bc 	.word	0x200003bc

08004f18 <_close_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4d05      	ldr	r5, [pc, #20]	; (8004f34 <_close_r+0x1c>)
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fb fc1e 	bl	8000764 <_close>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_close_r+0x1a>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_close_r+0x1a>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	200003bc 	.word	0x200003bc

08004f38 <_fstat_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_fstat_r+0x20>)
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	f7fb fc18 	bl	800077a <_fstat>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d102      	bne.n	8004f54 <_fstat_r+0x1c>
 8004f4e:	682b      	ldr	r3, [r5, #0]
 8004f50:	b103      	cbz	r3, 8004f54 <_fstat_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	bf00      	nop
 8004f58:	200003bc 	.word	0x200003bc

08004f5c <_isatty_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4d05      	ldr	r5, [pc, #20]	; (8004f78 <_isatty_r+0x1c>)
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fb fc16 	bl	8000798 <_isatty>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_isatty_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_isatty_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200003bc 	.word	0x200003bc

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	2200      	movs	r2, #0
 8004f86:	4d05      	ldr	r5, [pc, #20]	; (8004f9c <_lseek_r+0x20>)
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fb fc0e 	bl	80007ac <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200003bc 	.word	0x200003bc

08004fa0 <__malloc_lock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_lock+0x8>)
 8004fa2:	f7ff bdf5 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	200003b4 	.word	0x200003b4

08004fac <__malloc_unlock>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__malloc_unlock+0x8>)
 8004fae:	f7ff bdf0 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	200003b4 	.word	0x200003b4

08004fb8 <_read_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4d05      	ldr	r5, [pc, #20]	; (8004fd8 <_read_r+0x20>)
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f7fb fb93 	bl	80006f2 <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_read_r+0x1e>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_read_r+0x1e>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	200003bc 	.word	0x200003bc

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
